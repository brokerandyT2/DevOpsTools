using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using x3squaredcircles.datalink.container.Models;
using x3squaredcircles.datalink.container.Services;

namespace x3squaredcircles.DataLink.Container.Weavers
{
    public class JavaAwsLambdaWeaver : JavaWeaverBase
    {
        public JavaAwsLambdaWeaver(IAppLogger logger, ServiceBlueprint blueprint)
            : base(logger, blueprint) { }

        public override async Task GenerateProjectFileAsync(string projectPath, string logicSourcePath)
        {
            var dependencies = new StringBuilder();
            dependencies.AppendLine(GetMavenDependency("com.amazonaws", "aws-lambda-java-core", "1.2.3"));
            dependencies.AppendLine(GetMavenDependency("com.amazonaws", "aws-lambda-java-events", "3.11.4"));
            dependencies.AppendLine(GetMavenDependency("com.google.code.gson", "gson", "2.10.1"));

            // Correctly locate and reference the developer's business logic JAR.
            var businessLogicJarPath = FindBusinessLogicArtifact(logicSourcePath, projectPath);
            var logicDependency = $@"
        <dependency>
            <groupId>{_blueprint.HandlerClassFullName.Substring(0, _blueprint.HandlerClassFullName.LastIndexOf('.'))}</groupId>
            <artifactId>{_blueprint.HandlerClassFullName.Split('.').Last()}</artifactId>
            <version>1.0.0</version>
            <scope>system</scope>
            <systemPath>${{project.basedir}}/{businessLogicJarPath.Replace('\\', '/')}</systemPath>
        </dependency>";

            var pomContent = $@"
<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
    <modelVersion>4.0.0</modelVersion>
    <groupId>{_groupId}</groupId>
    <artifactId>{_blueprint.ServiceName}</artifactId>
    <version>1.0.0</version>
    <name>{_blueprint.ServiceName}</name>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
    </properties>
    <dependencies>
{dependencies.ToString().TrimEnd()}
{logicDependency}
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.5.2</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "pom.xml"), pomContent.Trim());
        }

        public override Task GenerateStartupFileAsync(string projectPath)
        {
            // For AWS Lambda with Java, there is no separate startup file like Program.cs.
            // The handler class itself is the entry point.
            return Task.CompletedTask;
        }

        public override async Task GeneratePlatformFilesAsync(string projectPath)
        {
            var resources = new StringBuilder();
            var packageName = $"{_groupId}.{_blueprint.ServiceName.ToLowerInvariant()}";

            foreach (var triggerMethod in _blueprint.TriggerMethods)
            {
                var eventSource = triggerMethod.DslAttributes.First(a => a.Name == "EventSource");
                var (eventType, eventProperties) = ParseUrnForSam(eventSource.Arguments["EventUrn"]);

                var handlerClassName = $"{triggerMethod.MethodName}_Handler";
                var handlerPath = $"{packageName}.{handlerClassName}::handleRequest";

                resources.AppendLine($@"  {triggerMethod.MethodName}Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: {handlerPath}
      Runtime: java17
      Architectures: [ x86_64 ]
      MemorySize: 512
      Timeout: 100
      Events:
        Trigger:
          Type: {eventType}
          Properties:
{eventProperties}");
            }

            var samTemplateContent = $@"
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  {_blueprint.ServiceName} - Auto-generated by 3SC DataLink from source version {_blueprint.Metadata.SourceVersionTag}

Resources:
{resources.ToString().TrimEnd()}
";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "template.yaml"), samTemplateContent.Trim());
        }

        public override async Task GenerateFunctionFileAsync(TriggerMethod triggerMethod, string projectPath)
        {
            var packageName = $"{_groupId}.{_blueprint.ServiceName.ToLowerInvariant()}";
            var packagePath = CreatePackagePath(projectPath, "main", packageName);
            var handlerClassName = $"{triggerMethod.MethodName}_Handler";

            var handlerVarName = ToCamelCase(_blueprint.HandlerClassFullName.Split('.').Last());
            var methodParams = triggerMethod.Parameters.Select(p => $"{p.TypeFullName} {p.Name}").ToList();
            var businessLogicCallParams = string.Join(", ", triggerMethod.Parameters.Select(p => p.Name));

            var payloadParam = triggerMethod.Parameters.FirstOrDefault(p => !p.IsBusinessLogicDependency);
            if (payloadParam == null) throw new DataLinkException(ExitCode.CodeGenerationFailed, "JAVA_PAYLOAD_NOT_FOUND", $"Method '{triggerMethod.MethodName}' requires a payload parameter.");

            var (awsEventRequest, awsEventResponse) = GetAwsEventType(payloadParam.TypeFullName);

            var imports = new HashSet<string>
            {
                "com.amazonaws.services.lambda.runtime.Context",
                "com.amazonaws.services.lambda.runtime.RequestHandler",
                $"com.amazonaws.services.lambda.runtime.events.{awsEventRequest}",
                $"com.amazonaws.services.lambda.runtime.events.{awsEventResponse}",
                "com.google.gson.Gson",
                "com.google.gson.GsonBuilder",
                _blueprint.HandlerClassFullName
            };
            triggerMethod.Parameters.ForEach(p => imports.Add(p.TypeFullName));

            var sb = new StringBuilder();
            sb.AppendLine($"package {packageName};");
            sb.AppendLine();
            sb.AppendLine(GenerateImports(imports));
            sb.AppendLine();
            sb.AppendLine($"public class {handlerClassName} implements RequestHandler<{awsEventRequest}, {awsEventResponse}> {{");
            sb.AppendLine();
            sb.AppendLine($"    private final {_blueprint.HandlerClassFullName} {handlerVarName};");
            sb.AppendLine("    private static final Gson gson = new GsonBuilder().create();");
            sb.AppendLine();
            sb.AppendLine($"    public {handlerClassName}() {{");
            sb.AppendLine($"        // In a real application, a DI framework like Dagger or Guice would be used here.");
            sb.AppendLine($"        this.{handlerVarName} = new {_blueprint.HandlerClassFullName}();");
            sb.AppendLine("    }");
            sb.AppendLine();
            sb.AppendLine($"    @Override");
            sb.AppendLine($"    public {awsEventResponse} handleRequest({awsEventRequest} event, Context context) {{");
            sb.AppendLine($"        // The generated shim is responsible for calling the business logic.");
            sb.AppendLine($"        // This is a simplified model. A full implementation would require");
            sb.AppendLine($"        // mapping event properties to all method parameters.");
            sb.AppendLine($"        {payloadParam.TypeFullName} {payloadParam.Name} = gson.fromJson(gson.toJson(event), {payloadParam.TypeFullName}.class);");
            sb.AppendLine($"        this.{handlerVarName}.{triggerMethod.MethodName}({businessLogicCallParams});");
            sb.AppendLine($"        return new {awsEventResponse}(); // Simplified response");
            sb.AppendLine("    }");
            sb.AppendLine("}");

            await File.WriteAllTextAsync(Path.Combine(packagePath, $"{handlerClassName}.java"), sb.ToString());
        }

        protected override async Task GenerateSingleTestHarnessFileAsync(TriggerMethod triggerMethod, string testPackagePath)
        {
            // Placeholder for AWS test harness generation.
            await Task.CompletedTask;
        }

        private (string eventType, string eventProperties) ParseUrnForSam(string urn)
        {
            var parts = urn.Split(':');
            if (parts.Length < 4) return ("Api", "            Path: /invalid-urn\n            Method: get");
            var service = parts[1].ToLowerInvariant();
            var resource = parts[2];
            var action = string.Join(":", parts.Skip(3));
            switch (service)
            {
                case "s3": return ("S3", $"            Bucket: {resource}\n            Events: s3:{action}");
                case "sqs": return ("SQS", $"            Queue: {resource}");
                case "apigateway": return ("Api", $"            Path: {resource}\n            Method: {action.ToLowerInvariant()}");
                default: return ("Api", $"            Path: /unsupported-service\n            Method: get");
            }
        }

        private (string Request, string Response) GetAwsEventType(string payloadType)
        {
            if (payloadType.Contains("S3Event")) return ("S3Event", "String");
            if (payloadType.Contains("SQSEvent")) return ("SQSEvent", "Void");
            return ("APIGatewayProxyRequestEvent", "APIGatewayProxyResponseEvent");
        }
    }
}