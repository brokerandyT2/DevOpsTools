// 3SC API Assembler: JavaScript DSL
// Version: 6.0.0 (Definitve)
//
// To use, require this file and wrap your handlers and methods with the provided functions.

'use strict';

/**
 * Defines when a logging hook should be executed.
 * @readonly
 * @enum {string}
 */
const LoggingAction = Object.freeze({
    OnInbound: "OnInbound",
    OnOutbound: "OnOutbound",
    OnError: "OnError"
});

/**
 * Marks a class as a handler containing function entry points.
 * @param {Function} constructor The class constructor to wrap.
 * @returns {Function} The wrapped class with metadata.
 */
function FunctionHandler(constructor) {
    constructor._3sc_function_handler = true;
    return constructor;
}

/**
 * Groups related function entry points into a single deployable unit.
 * @param {{serviceName: string, version: string}} options 
 * @returns {function(Function): Function} A decorator function.
 */
function DeploymentGroup(options) {
    return function(target) {
        target._3sc_deployment_group = options;
        return target;
    };
}

/**
 * Marks a method as a function entry point and defines its event source using a URN.
 * @param {string} eventUrn The URN of the event source (e.g., "aws:s3:{bucket}:ObjectCreated:Put").
 * @returns {function(Function, string, PropertyDescriptor): PropertyDescriptor} A decorator function.
 */
function EventSource(eventUrn) {
    return function(target, propertyKey, descriptor) {
        const method = descriptor.value;
        if (!method._3sc_event_sources) {
            method._3sc_event_sources = [];
        }
        method._3sc_event_sources.push({ eventUrn });
        return descriptor;
    };
}

/**
 * Injects a cross-cutting concern or pre-processing gate.
 * @param {{handler: Function, method: string}} options 
 * @returns {function(Function, string, PropertyDescriptor): PropertyDescriptor} A decorator function.
 */
function Requires(options) {
    return function(target, propertyKey, descriptor) {
        const method = descriptor.value;
        if (!method._3sc_requires) {
            method._3sc_requires = [];
        }
        method._3sc_requires.push({ handler: options.handler.name, method: options.method });
        return descriptor;
    };
}

/**
 * Injects an observability or logging hook.
 * @param {{handler: Function, action: LoggingAction}} options 
 * @returns {function(Function, string, PropertyDescriptor): PropertyDescriptor} A decorator function.
 */
function RequiresLogger(options) {
    return function(target, propertyKey, descriptor) {
        const method = descriptor.value;
        if (!method._3sc_requires_loggers) {
            method._3sc_requires_loggers = [];
        }
        method._3sc_requires_loggers.push({ handler: options.handler.name, action: options.action });
        return descriptor;
    };
}

module.exports = {
    LoggingAction,
    FunctionHandler,
    DeploymentGroup,
    EventSource,
    Requires,
    RequiresLogger
};