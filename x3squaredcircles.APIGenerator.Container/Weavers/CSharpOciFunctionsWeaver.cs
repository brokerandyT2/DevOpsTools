using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using x3squaredcircles.datalink.container.Models;
using x3squaredcircles.datalink.container.Services;
using x3squaredcircles.DataLink.Container.Weavers;

namespace x3squaredcircles.datalink.container.Weavers
{
    /// <summary>
    /// Implements ILanguageWeaver for generating a C# OCI Functions project using the Fn Project FDK.
    /// This is the definitive weaver for the C# on Oracle Cloud Infrastructure target.
    /// </summary>
    public class CSharpOciFunctionsWeaver : ILanguageWeaver
    {
        private readonly IAppLogger _logger;
        private readonly ServiceBlueprint _blueprint;

        public CSharpOciFunctionsWeaver(IAppLogger logger, ServiceBlueprint blueprint)
        {
            _logger = logger;
            _blueprint = blueprint;
        }

        public async Task GenerateProjectFileAsync(string projectPath, string logicSourcePath)
        {
            var packageReferences = new StringBuilder();
            packageReferences.AppendLine(@"    <PackageReference Include=""Fn.Fdk"" Version=""1.0.0"" />");
            packageReferences.AppendLine(@"    <PackageReference Include=""Microsoft.Extensions.Hosting"" Version=""8.0.0"" />");

            var logicProjectFilePath = Directory.GetFiles(logicSourcePath, "*.csproj", SearchOption.AllDirectories).FirstOrDefault();
            if (logicProjectFilePath == null)
            {
                throw new DataLinkException(ExitCode.SourceAnalysisFailed, "CSPROJ_NOT_FOUND", "Could not find a .csproj file in the business logic source path.");
            }
            var relativeLogicPath = Path.GetRelativePath(projectPath, logicProjectFilePath);

            var csprojContent = $@"
<Project Sdk=""Microsoft.NET.Sdk"">
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <RootNamespace>{_blueprint.ServiceName}</RootNamespace>
  </PropertyGroup>
  <ItemGroup>
{packageReferences.ToString().TrimEnd()}
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include=""{relativeLogicPath}"" />
  </ItemGroup>
</Project>";
            var filePath = Path.Combine(projectPath, $"{_blueprint.ServiceName}.csproj");
            await File.WriteAllTextAsync(filePath, csprojContent.Trim());
            _logger.LogDebug($"Generated C# OCI project file: {filePath}");
        }

        public async Task GenerateStartupFileAsync(string projectPath)
        {
            var allHandlerClasses = _blueprint.TriggerMethods
                .SelectMany(tm => tm.RequiredHooks.Select(h => h.HandlerClassFullName))
                .Append(_blueprint.HandlerClassFullName)
                .Distinct(StringComparer.OrdinalIgnoreCase);

            var diRegistrations = string.Join(Environment.NewLine, allHandlerClasses.Select(cls => $"            services.AddTransient<{cls}>();"));

            var allDependencyInterfaces = _blueprint.TriggerMethods
                .SelectMany(tm => tm.Parameters.Where(p => !p.IsPayload && p.TypeFullName.StartsWith("I")))
                .Select(p => p.TypeFullName)
                .Distinct(StringComparer.OrdinalIgnoreCase);

            var dependencyRegistrations = string.Join(Environment.NewLine, allDependencyInterfaces.Select(idep => $"            // services.AddSingleton<{idep}, ...>(); // Developer must provide concrete implementations"));

            var usingStatements = allHandlerClasses.Concat(allDependencyInterfaces)
                .Where(cls => cls.Contains('.'))
                .Select(cls => cls.Substring(0, cls.LastIndexOf('.')))
                .Distinct(StringComparer.OrdinalIgnoreCase)
                .OrderBy(ns => ns)
                .Select(ns => $"using {ns};");

            var programContent = $@"
using Fn.Fdk;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
{string.Join(Environment.NewLine, usingStatements)}

// Auto-generated by 3SC DataLink at {DateTime.UtcNow:O}
// Source Version: {_blueprint.Metadata.SourceVersionTag}

public static class Program
{{
    public static async Task Main(string[] args)
    {{
        var host = new HostBuilder()
            .ConfigureServices(services =>
            {{
                // Register developer-defined handler and hook classes
{diRegistrations}

                // Register dependencies required by the business logic
{dependencyRegistrations}
            }})
            .Build();

        // The Fn Project FDK handles the runtime loop and function invocation.
        await Fn.Create(host).RunAsync();
    }}
}}";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "Program.cs"), programContent.Trim());
            _logger.LogDebug($"Generated Program.cs for OCI at: {projectPath}");
        }

        public async Task GeneratePlatformFilesAsync(string projectPath)
        {
            // OCI Functions have one entry point per function (container). We generate one for the first trigger.
            var triggerMethod = _blueprint.TriggerMethods.First();
            var handlerClassName = $"com.example.fn.{_blueprint.ServiceName}.Function"; // Example convention

            var funcYamlContent = $@"
schema_version: 20180708
name: {_blueprint.ServiceName.ToLowerInvariant()}
version: {_blueprint.Metadata.SourceVersionTag.TrimStart('v')}
runtime: dotnet
entrypoint: dotnet {_blueprint.ServiceName}.dll
cmd: {_blueprint.ServiceName}::{handlerClassName}::{triggerMethod.MethodName}
";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "func.yaml"), funcYamlContent.Trim());
            _logger.LogDebug($"Generated func.yaml file: {projectPath}");

            var dockerfileContent = $@"
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /function
COPY . .
RUN dotnet publish -c Release -o out

FROM mcr.microsoft.com/dotnet/runtime:8.0
WORKDIR /function
COPY --from=build /function/out .
EXPOSE 8080
ENTRYPOINT [ ""dotnet"", ""{_blueprint.ServiceName}.dll"" ]
";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "Dockerfile"), dockerfileContent.Trim());
            _logger.LogDebug($"Generated Dockerfile for OCI at: {projectPath}");
        }

        public async Task GenerateFunctionFileAsync(TriggerMethod triggerMethod, string projectPath)
        {
            // For OCI/Fn Project, we generate a single Function class with methods for each trigger.
            // This class will be resolved from the DI container built in Program.cs.
            var functionClassName = "Function";
            var functionFilePath = Path.Combine(projectPath, $"{functionClassName}.cs");
            if (File.Exists(functionFilePath))
            {
                _logger.LogDebug($"{functionClassName}.cs already exists, skipping generation for this trigger to avoid overwriting.");
                return;
            }

            var handlerClassName = _blueprint.HandlerClassFullName.Split('.').Last();
            var handlerVarName = "_" + ToCamelCase(handlerClassName);

            var sb = new StringBuilder();
            var allTypes = _blueprint.TriggerMethods
                .SelectMany(tm => tm.Parameters.Select(p => p.TypeFullName))
                .Append(_blueprint.HandlerClassFullName)
                .Concat(_blueprint.TriggerMethods.SelectMany(tm => tm.RequiredHooks.Select(h => h.HandlerClassFullName)));

            var usingStatements = GenerateFileHeader(allTypes);

            sb.AppendLine(usingStatements);
            sb.AppendLine("using Fn.Fdk;");
            sb.AppendLine("using Fn.Fdk.Context;");
            sb.AppendLine("using System.Text.Json;");
            sb.AppendLine();
            sb.AppendLine($"namespace {_blueprint.ServiceName};");
            sb.AppendLine();
            sb.AppendLine($"public class {functionClassName}");
            sb.AppendLine("{");

            var diMap = BuildDependencyMap(triggerMethod, handlerVarName);
            foreach (var service in diMap) sb.AppendLine($"    private readonly {service.Key} {service.Value};");
            sb.AppendLine();

            var ctorParams = string.Join(", ", diMap.Select(kvp => $"{kvp.Key} {kvp.Value.TrimStart('_')}"));
            var ctorAssignments = string.Join(Environment.NewLine, diMap.Select(kvp => $"        {kvp.Value} = {kvp.Value.TrimStart('_')};"));

            sb.AppendLine($"    public {functionClassName}({ctorParams})");
            sb.AppendLine("    {");
            sb.AppendLine(ctorAssignments);
            sb.AppendLine("    }");
            sb.AppendLine();

            // Generate a handler method for each trigger, which will be invoked by the Fn FDK.
            foreach (var method in _blueprint.TriggerMethods)
            {
                var payload = method.Parameters.First(p => p.IsPayload);
                sb.AppendLine($"    public async Task<{method.ReturnType}> {method.MethodName}({payload.TypeFullName} payload)");
                sb.AppendLine("    {");
                sb.AppendLine($"         // Weave hook and business logic calls here.");
                sb.AppendLine($"         await {handlerVarName}.{method.MethodName}(payload);");
                sb.AppendLine($"         return default; // OCI Functions can return any serializable object.");
                sb.AppendLine("    }");
            }

            sb.AppendLine("}");

            await File.WriteAllTextAsync(functionFilePath, sb.ToString());
            _logger.LogDebug($"Generated C# OCI function file: {functionFilePath}");
        }

        public async Task AssembleTestHarnessAsync(string testSourcePath, string testProjectPath, string mainProjectPath)
        {
            _logger.LogInfo("Assembling C# OCI test harness project...");
            var testProjectName = $"{_blueprint.ServiceName}.Tests";
            var relativeMainPath = Path.GetRelativePath(testProjectPath, mainProjectPath);
            var logicProjectFilePath = Directory.GetFiles(testSourcePath, "*.csproj", SearchOption.AllDirectories).First();
            var relativeLogicPath = Path.GetRelativePath(testProjectPath, logicProjectFilePath);

            var testCsprojContent = $@"
<Project Sdk=""Microsoft.NET.Sdk"">
  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include=""Microsoft.NET.Test.Sdk"" Version=""17.8.0"" />
    <PackageReference Include=""xunit"" Version=""2.5.3"" />
    <PackageReference Include=""Moq"" Version=""4.20.70"" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include=""..\{relativeMainPath}\{_blueprint.ServiceName}.csproj"" />
    <ProjectReference Include=""..\{relativeLogicPath}"" />
  </ItemGroup>
</Project>";
            await File.WriteAllTextAsync(Path.Combine(testProjectPath, $"{testProjectName}.csproj"), testCsprojContent.Trim());

            var handlerClassNameShort = _blueprint.HandlerClassFullName.Split('.').Last();
            var relevantTestFiles = Directory.GetFiles(testSourcePath, $"*{handlerClassNameShort}Tests.cs", SearchOption.AllDirectories);
            foreach (var testFile in relevantTestFiles)
            {
                File.Copy(testFile, Path.Combine(testProjectPath, Path.GetFileName(testFile)), true);
            }

            await GenerateSingleTestHarnessFileAsync(testProjectPath);
        }

        private async Task GenerateSingleTestHarnessFileAsync(string testProjectPath)
        {
            var functionClassName = "Function";
            var handlerClassNameShort = _blueprint.HandlerClassFullName.Split('.').Last();
            var triggerMethod = _blueprint.TriggerMethods.First();

            var mockFields = new StringBuilder();
            var mockInits = new StringBuilder();
            var mockObjects = new StringBuilder();

            var diMap = BuildDependencyMap(triggerMethod, "_" + ToCamelCase(handlerClassNameShort));
            foreach (var (type, name) in diMap)
            {
                var mockName = $"_mock{name.Substring(1, 1).ToUpper() + name.Substring(2)}";
                mockFields.AppendLine($"    private readonly Mock<{type}> {mockName};");
                mockInits.AppendLine($"        {mockName} = new Mock<{type}>();");
                mockObjects.Append($", {mockName}.Object");
            }
            mockObjects.Remove(0, 2);

            var harnessContent = $@"
using Xunit;
using Moq;
using System;
using System.Threading.Tasks;
{GenerateFileHeader(diMap.Keys)}
using {_blueprint.ServiceName};

// Auto-generated by 3SC DataLink. This test skeleton is designed to fail by default.
public class {functionClassName}_HarnessTests
{{
{mockFields}

    public {functionClassName}_HarnessTests()
    {{
{mockInits}
    }}

    [Fact]
    public void {triggerMethod.MethodName}_HappyPath_ShouldSucceed()
    {{
        // This test will fail here until you implement the mock setups and assertions.
        throw new NotImplementedException(""Test not yet implemented."");

        /* --- EXAMPLE IMPLEMENTATION ---
        // Arrange
        var function = new {functionClassName}({mockObjects});
        var payload = new {triggerMethod.Parameters.First(p => p.IsPayload).TypeFullName}();

        // Act
        // await function.{triggerMethod.MethodName}(payload);

        // Assert
        // _mock{handlerClassNameShort}.Verify(h => h.{triggerMethod.MethodName}(It.IsAny<{triggerMethod.Parameters.First(p => p.IsPayload).TypeFullName}>()), Times.Once);
        */
    }}
}}";
            await File.WriteAllTextAsync(Path.Combine(testProjectPath, $"{functionClassName}_Harness.cs"), harnessContent.Trim());
        }

        private Dictionary<string, string> BuildDependencyMap(TriggerMethod triggerMethod, string handlerVarName)
        {
            var diServices = new Dictionary<string, string>();
            diServices.Add(_blueprint.HandlerClassFullName, handlerVarName);
            triggerMethod.RequiredHooks.ForEach(h => diServices.TryAdd(h.HandlerClassFullName, $"_{ToCamelCase(h.HandlerClassFullName.Split('.').Last())}"));
            triggerMethod.Parameters.Where(p => !p.IsPayload).ToList().ForEach(d => diServices.TryAdd(d.TypeFullName, $"_{d.Name}"));
            return diServices;
        }

        private string ToCamelCase(string input)
        {
            if (string.IsNullOrWhiteSpace(input)) return "unknown";
            return char.ToLowerInvariant(input[0]) + input.Substring(1);
        }

        private string GenerateFileHeader(IEnumerable<string> types)
        {
            return string.Join(Environment.NewLine, types
                .Where(t => t.Contains('.'))
                .Select(t => t.Substring(0, t.LastIndexOf('.')))
                .Distinct(StringComparer.OrdinalIgnoreCase)
                .OrderBy(ns => ns)
                .Select(ns => $"using {ns};"));
        }
    }
}