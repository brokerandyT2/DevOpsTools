using System;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using x3squaredcircles.datalink.container.Models;
using x3squaredcircles.datalink.container.Services;

namespace x3squaredcircles.DataLink.Container.Weavers
{
    public class TypeScriptAwsLambdaWeaver : ScriptingWeaverBase
    {
        public TypeScriptAwsLambdaWeaver(IAppLogger logger, ServiceBlueprint blueprint)
            : base(logger, blueprint) { }

        protected override string GetDeveloperTestFilePattern(string handlerClassNameShort) => $"*{handlerClassNameShort}.test.ts";
        protected override string GetHandlerFileName() => "handler.ts";

        public override async Task GenerateProjectFileAsync(string projectPath, string logicSourcePath)
        {
            var devDependencies = new StringBuilder();
            devDependencies.AppendLine(@"    ""@types/aws-lambda"": ""^8.10.137"",");
            devDependencies.AppendLine(@"    ""@types/jest"": ""^29.5.12"",");
            devDependencies.AppendLine(@"    ""@types/node"": ""^20.12.7"",");
            devDependencies.AppendLine(@"    ""esbuild"": ""^0.20.2"",");
            devDependencies.AppendLine(@"    ""jest"": ""^29.7.0"",");
            devDependencies.AppendLine(@"    ""ts-jest"": ""^29.1.2"",");
            devDependencies.AppendLine(@"    ""typescript"": ""^5.4.5""");

            var packageJsonContent = $@"
{{
  ""name"": ""{_blueprint.ServiceName.ToLowerInvariant()}"",
  ""version"": ""1.0.0"",
  ""description"": ""Auto-generated by 3SC DataLink"",
  ""main"": ""dist/handler.js"",
  ""scripts"": {{
    ""build"": ""esbuild src/handler.ts --bundle --minify --sourcemap --platform=node --target=es2020 --outfile=dist/handler.js"",
    ""test"": ""jest""
  }},
  ""devDependencies"": {{
{devDependencies.ToString().TrimEnd(',')}
  }}
}}";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "package.json"), packageJsonContent.Trim());

            var tsConfigContent = @"{""compilerOptions"": {""target"": ""ES2020"", ""strict"": true, ""module"": ""commonjs"", ""esModuleInterop"": true, ""outDir"": ""dist"", ""rootDir"": ""src""}}";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "tsconfig.json"), tsConfigContent.Trim());

            var jestConfigContent = @"module.exports = { preset: 'ts-jest', testEnvironment: 'node' };";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "jest.config.js"), jestConfigContent.Trim());

            var destLogicPath = Path.Combine(projectPath, "src", "business_logic");
            CopyDirectory(logicSourcePath, destLogicPath);
        }

        public override Task GenerateStartupFileAsync(string projectPath)
        {
            return Task.CompletedTask;
        }

        public override async Task GeneratePlatformFilesAsync(string projectPath)
        {
            var resources = new StringBuilder();

            foreach (var triggerMethod in _blueprint.TriggerMethods)
            {
                var eventSource = triggerMethod.DslAttributes.First(a => a.Name == "EventSource");
                var (eventType, eventProperties) = ParseUrnForSam(eventSource.Arguments["EventUrn"]);

                var handlerPath = GetHandlerPath(triggerMethod.MethodName);

                resources.AppendLine($@"  {triggerMethod.MethodName}Function:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: .
      Handler: {handlerPath}
      Runtime: nodejs20.x
      Architectures: [ x86_64 ]
      Events:
        Trigger:
          Type: {eventType}
          Properties:
{eventProperties}");
            }

            var samTemplateContent = $@"
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  {_blueprint.ServiceName} - Auto-generated by 3SC DataLink from source version {_blueprint.Metadata.SourceVersionTag}

Resources:
{resources.ToString().TrimEnd()}
";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "template.yaml"), samTemplateContent.Trim());
        }

        public override async Task GenerateFunctionFileAsync(TriggerMethod triggerMethod, string projectPath)
        {
            var srcPath = Path.Combine(projectPath, "src");
            Directory.CreateDirectory(srcPath);
            var handlerFilePath = Path.Combine(srcPath, GetHandlerFileName());

            var handlerClassName = _blueprint.HandlerClassFullName.Split('.').Last();
            var handlerVarName = ToCamelCase(handlerClassName);

            var payloadParam = triggerMethod.Parameters.FirstOrDefault(p => !p.IsBusinessLogicDependency);
            if (payloadParam == null) throw new DataLinkException(ExitCode.CodeGenerationFailed, "TS_PAYLOAD_NOT_FOUND", $"Method '{triggerMethod.MethodName}' requires a payload parameter.");

            var (awsEventType, payloadExtraction) = GetAwsEventType(payloadParam.TypeFullName);

            var sb = new StringBuilder();
            if (!File.Exists(handlerFilePath))
            {
                sb.AppendLine($"import {{ APIGatewayProxyEvent, APIGatewayProxyResult, SQSEvent, S3Event }} from 'aws-lambda';");
                sb.AppendLine($"import {{ {handlerClassName} }} from './business_logic'; // This path may need adjustment");
                sb.AppendLine();
                sb.AppendLine($"const handlerInstance = new {handlerClassName}();");
                sb.AppendLine();
            }

            sb.AppendLine($"export const {triggerMethod.MethodName} = async (event: {awsEventType}): Promise<APIGatewayProxyResult> => {{");
            sb.AppendLine("    try {");
            sb.AppendLine($"        const payload = {payloadExtraction};");
            sb.AppendLine($"        const result = await handlerInstance.{ToCamelCase(triggerMethod.MethodName)}(payload);");
            sb.AppendLine("        return { statusCode: 200, body: JSON.stringify(result || { message: 'Success' }) };");
            sb.AppendLine("    } catch (error) {");
            sb.AppendLine("        console.error('An error occurred:', error);");
            sb.AppendLine("        return { statusCode: 500, body: JSON.stringify({ message: 'An error occurred.' }) };");
            sb.AppendLine("    }");
            sb.AppendLine("};");
            sb.AppendLine();

            await File.AppendAllTextAsync(handlerFilePath, sb.ToString());
        }

        protected override async Task GenerateSingleTestHarnessFileAsync(TriggerMethod triggerMethod, string testPackagePath)
        {
            var harnessFileName = $"handler.{triggerMethod.MethodName}.harness.test.ts";
            await File.WriteAllTextAsync(Path.Combine(testPackagePath, harnessFileName), "// TODO: Implement TypeScript AWS test harness");
        }

        private (string EventType, string PayloadExtraction) GetAwsEventType(string payloadType)
        {
            if (payloadType.Contains("S3Event")) return ("S3Event", "event");
            if (payloadType.Contains("SQSEvent")) return ("SQSEvent", "JSON.parse(event.Records[0].body)");
            return ("APIGatewayProxyEvent", "JSON.parse(event.body || '{}')");
        }

        private void CopyDirectory(string sourceDir, string destinationDir)
        {
            var dir = new DirectoryInfo(sourceDir);
            if (!dir.Exists) return;

            Directory.CreateDirectory(destinationDir);
            foreach (FileInfo file in dir.GetFiles())
            {
                file.CopyTo(Path.Combine(destinationDir, file.Name), true);
            }
            foreach (DirectoryInfo subDir in dir.GetDirectories())
            {
                if (subDir.Name != "tests" && subDir.Name != ".git" && subDir.Name != "node_modules")
                {
                    CopyDirectory(subDir.FullName, Path.Combine(destinationDir, subDir.Name));
                }
            }
        }
    }
}