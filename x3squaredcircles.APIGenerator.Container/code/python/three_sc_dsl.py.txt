# 3SC API Assembler: Python Decorator DSL
# Version: 6.0.0 (Definitive)
#
# To use, simply include this file in your business logic project.

from enum import Enum
import functools

class LoggingAction(Enum):
    """Defines when a logging hook should be executed."""
    ON_INBOUND = "OnInbound"
    ON_OUTBOUND = "OnOutbound"
    ON_ERROR = "OnError"

def function_handler(cls):
    """
    Marks a class as a handler containing function entry points that the
    3SC API Assembler should process.
    """
    @functools.wraps(cls)
    def wrapper(*args, **kwargs):
        return cls(*args, **kwargs)
    setattr(wrapper, '_3sc_function_handler', True)
    return wrapper

def deployment_group(service_name, version):
    """
    Groups related function entry points into a single deployable unit or service.
    """
    def decorator(obj):
        setattr(obj, '_3sc_deployment_group', {'service_name': service_name, 'version': version})
        return obj
    return decorator

def event_source(event_urn):
    """
    Marks a method as a function entry point and defines its event source using a URN.
    
    Args:
        event_urn (str): The Uniform Resource Name (URN) of the event source.
                         Format: "cloud:service:resource-template:action"
                         Example: "aws:s3:{customerUploadsBucket}:ObjectCreated:Put"
    """
    def decorator(func):
        if not hasattr(func, '_3sc_event_sources'):
            setattr(func, '_3sc_event_sources', [])
        getattr(func, '_3sc_event_sources').append({'event_urn': event_urn})
        return func
    return decorator

def requires(handler, method):
    """
    Injects a cross-cutting concern or pre-processing gate (e.g., for authentication).
    """
    def decorator(func):
        if not hasattr(func, '_3sc_requires'):
            setattr(func, '_3sc_requires', [])
        # Get the fully qualified name of the handler class
        handler_fqn = f"{handler.__module__}.{handler.__name__}"
        getattr(func, '_3sc_requires').append({'handler': handler_fqn, 'method': method})
        return func
    return decorator

def requires_logger(handler, action):
    """
    Injects an observability or logging hook into the function's execution pipeline.
    """
    def decorator(func):
        if not hasattr(func, '_3sc_requires_loggers'):
            setattr(func, '_3sc_requires_loggers', [])
        handler_fqn = f"{handler.__module__}.{handler.__name__}"
        getattr(func, '_3sc_requires_loggers').append({'handler': handler_fqn, 'action': action.value})
        return func
    return decorator