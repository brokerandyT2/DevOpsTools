using System;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using x3squaredcircles.datalink.container.Models;
using x3squaredcircles.datalink.container.Services;
using x3squaredcircles.DataLink.Container.Weavers;
using static System.Net.Mime.MediaTypeNames;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace x3squaredcircles.datalink.container.Weavers
{
    /// <summary>
    /// Implements ILanguageWeaver for generating a Python OCI Functions project using the Fn Project FDK.
    /// </summary>
    public class PythonOciFunctionsWeaver : ILanguageWeaver
    {
        private readonly IAppLogger _logger;
        private readonly ServiceBlueprint _blueprint;

        public PythonOciFunctionsWeaver(IAppLogger logger, ServiceBlueprint blueprint)
        {
            _logger = logger;
            _blueprint = blueprint;
        }
        public async Task AssembleTestHarnessAsync(string testSourcePath, string testProjectPath, string mainProjectPath)
        {
            _logger.LogInfo("Assembling Python OCI test harness project...");
            var testsPath = Path.Combine(testProjectPath, "tests");
            Directory.CreateDirectory(testsPath);

            var handlerClassNameShort = _blueprint.HandlerClassFullName.Split('.').Last();
            var relevantTestFiles = Directory.GetFiles(testSourcePath, $"test_*{ToSnakeCase(handlerClassNameShort)}.py", SearchOption.AllDirectories);
            foreach (var testFile in relevantTestFiles)
            {
                File.Copy(testFile, Path.Combine(testsPath, Path.GetFileName(testFile)), true);
            }

            var testRequirementsContent = @"# Auto-generated by 3SC DataLink
pytest
mock
fdk
";
            await File.WriteAllTextAsync(Path.Combine(testProjectPath, "requirements.txt"), testRequirementsContent.Trim());

            await GenerateSingleTestHarnessFileAsync(testsPath);
        }
        private async Task GenerateSingleTestHarnessFileAsync(string testPackagePath)
        {
            var harnessFileName = "test_func_harness.py";
            var handlerClassName = _blueprint.HandlerClassFullName.Split('.').Last();
            var businessLogicModuleName = ToSnakeCase(handlerClassName);
            var triggerMethod = _blueprint.TriggerMethods.First();

            var harnessContent = $@"
# Auto-generated by 3SC DataLink. This test skeleton is designed to fail by default.
import io
import json
import pytest
from unittest import mock
from fdk import response

# Import the generated handler file
import func

class TestFuncHarness:

    @mock.patch('func.{businessLogicModuleName}') # Mock the business logic module
    def test_{ToSnakeCase(triggerMethod.MethodName)}_invokes_business_logic(self, mock_business_logic_module):
        """"""
        This test verifies that the generated shim correctly invokes the business logic.
        """"""
        # This test will fail here until you implement the mock setups and assertions.
        pytest.fail(""Test not yet implemented. Please configure mocks and add assertions, then remove this line."")

        # --- EXAMPLE IMPLEMENTATION ---
        # # Arrange
        # mock_handler_instance = mock_business_logic_module.{handlerClassName}.return_value
        # mock_context = mock.MagicMock()
        #
        # payload = {{'key': 'value'}}
        # input_data = io.BytesIO(json.dumps(payload).encode('utf-8'))
        #
        # # Act
        # result = func.handler(mock_context, data=input_data)
        #
        # # Assert
        # assert result.status_code == 200
        # mock_handler_instance.{ToSnakeCase(triggerMethod.MethodName)}.assert_called_once()
";
            await File.WriteAllTextAsync(Path.Combine(testPackagePath, harnessFileName), harnessContent.Trim());
        }
        public async Task GenerateProjectFileAsync(string projectPath, string logicSourcePath)
        {
            // Python projects use requirements.txt for dependencies.
            var requirementsContent = $@"# Auto-generated by 3SC DataLink
# Add any business logic dependencies from your source repository here.
fdk
json
";
            var filePath = Path.Combine(projectPath, "requirements.txt");
            await File.WriteAllTextAsync(filePath, requirementsContent.Trim());
            _logger.LogDebug($"Generated requirements.txt file: {filePath}");
        }

        public Task GenerateStartupFileAsync(string projectPath)
        {
            // The Python FDK uses func.py as the entry point, which is generated in GenerateFunctionFileAsync.
            return Task.CompletedTask;
        }

        public async Task GeneratePlatformFilesAsync(string projectPath)
        {
            // Generate the func.yaml file required by the Fn Project CLI.
            // OCI Functions typically have one entry point per function (container).
            var triggerMethod = _blueprint.TriggerMethods.First();
            var funcYamlContent = $@"
schema_version: 20180708
name: {_blueprint.ServiceName.ToLowerInvariant()}
version: {_blueprint.Metadata.SourceVersionTag.TrimStart('v')}
runtime: python
entrypoint: /python/bin/fdk /function/func.py handler
";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "func.yaml"), funcYamlContent.Trim());
            _logger.LogDebug($"Generated func.yaml file: {projectPath}");

            // Generate the Dockerfile for building the OCI Function container.
            var dockerfileContent = $@"
# Auto-generated by 3SC DataLink
# Source Version: {_blueprint.Metadata.SourceVersionTag}
FROM fnproject/python:3.9-dev as build-stage
WORKDIR /function
ADD . /function/
RUN pip3 install --target /python/  --no-cache-dir -r requirements.txt && \
    # TODO: Add steps here to install the developer's business logic package
    rm -rf ~/.cache/pip

FROM fnproject/python:3.9
WORKDIR /function
COPY --from=build-stage /python /python/
COPY . /function/
ENTRYPOINT [""/python/bin/fdk"", ""/function/func.py"", ""handler""]
";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "Dockerfile"), dockerfileContent.Trim());
            _logger.LogDebug($"Generated Dockerfile for OCI: {projectPath}");
        }

        public async Task GenerateFunctionFileAsync(TriggerMethod triggerMethod, string projectPath)
        {
            var handlerClassName = _blueprint.HandlerClassFullName.Split('.').Last();
            var handlerModuleName = ToSnakeCase(handlerClassName);
            var payload = triggerMethod.Parameters.First(p => p.IsPayload);

            // Using a verbatim string literal (@"...") is the key to managing the Python syntax correctly.
            // Inside a verbatim string, double quotes must be escaped by doubling them ("").
            var funcPyContent = $@"
# Auto-generated by 3SC DataLink at {DateTime.UtcNow:O}
# Source Version: {_blueprint.Metadata.SourceVersionTag}

import io
import json
import logging

from fdk import response

# Assumes the developer's business logic is available to be imported.
# from business_logic.{handlerModuleName} import {handlerClassName}

def handler(ctx, data: io.BytesIO=None):
    """"""
    This is the auto-generated function shim for OCI Functions.
    It deserializes the payload and invokes your business logic.
    """"""
    logging.basicConfig(level=logging.INFO)
    log = logging.getLogger()
    
    # In a real application, dependency injection would be initialized here.
    # handler_instance = {handlerClassName}()

    try:
        log.info(""Function '{triggerMethod.MethodName}' triggered."")
        body = json.loads(data.getvalue())
        # The payload object would be an instance of the developer's DTO class.
        # payload = {payload.TypeFullName}(**body)

        # Weave [Requires] hooks (pre-processing gates like auth)
        # Weave [RequiresLogger] OnInbound hooks here

        # Invoke the business logic
        # result = handler_instance.{ToSnakeCase(triggerMethod.MethodName)}(payload)

        return response.Response(
            ctx, 
            response_data=json.dumps({"\"message\"": ""Request processed successfully.""}),
            headers={{""Content-Type"": ""application/json""}}
        )
    except Exception as e:
        log.error(f""An error occurred: {{str(e)}}"")
        # Weave [RequiresLogger] OnError hooks here
        return response.Response(
            ctx, 
            response_data=json.dumps({{'message': 'An error occurred.', 'error': str(e)}}),
            status_code=500,
            headers={{""Content-Type"": ""application/json""}}
        )
";
            // This C# code replaces single quotes in the json.dumps call with double quotes for valid JSON.
            funcPyContent = funcPyContent.Replace("{{'message'", "{{\"message\"")
                                       .Replace("'error'", "\"error\"}}");

            await File.WriteAllTextAsync(Path.Combine(projectPath, "func.py"), funcPyContent.Trim());
            _logger.LogDebug($"Generated Python OCI handler file: func.py");
        }

        private string ToSnakeCase(string input)
        {
            if (string.IsNullOrWhiteSpace(input)) return "unknown";
            // A simple conversion for PascalCase to snake_case
            return string.Concat(input.Select((x, i) => i > 0 && char.IsUpper(x) ? "_" + x.ToString() : x.ToString())).ToLower();
        }
    }
}