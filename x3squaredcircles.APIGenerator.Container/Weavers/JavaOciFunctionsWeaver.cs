using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using x3squaredcircles.datalink.container.Models;
using x3squaredcircles.datalink.container.Services;
using x3squaredcircles.DataLink.Container.Weavers;

namespace x3squaredcircles.datalink.container.Weavers
{
    /// <summary>
    /// Implements ILanguageWeaver for generating a Java OCI Functions project using the Fn Project FDK and Maven.
    /// </summary>
    public class JavaOciFunctionsWeaver : ILanguageWeaver
    {
        private readonly IAppLogger _logger;
        private readonly ServiceBlueprint _blueprint;

        public JavaOciFunctionsWeaver(IAppLogger logger, ServiceBlueprint blueprint)
        {
            _logger = logger;
            _blueprint = blueprint;
        }

        public async Task GenerateProjectFileAsync(string projectPath, string logicSourcePath)
        {
            var dependencies = new StringBuilder();
            dependencies.AppendLine(GetMavenDependency("com.fnproject.fn", "api", "1.0.145"));
            dependencies.AppendLine(GetMavenDependency("com.fnproject.fn", "testing-core", "1.0.145", "test"));
            dependencies.AppendLine(GetMavenDependency("org.junit.jupiter", "junit-jupiter-api", "5.10.2", "test"));
            dependencies.AppendLine(GetMavenDependency("org.mockito", "mockito-core", "5.11.0", "test"));
            dependencies.AppendLine(GetMavenDependency("org.mockito", "mockito-junit-jupiter", "5.11.0", "test"));

            var pomContent = $@"
<project xmlns=""http://maven.apache.org/POM/4.0.0""
         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example.fn</groupId>
    <artifactId>{_blueprint.ServiceName.ToLowerInvariant()}</artifactId>
    <version>1.0.0</version>
    
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
    </properties>

    <dependencies>
{dependencies.ToString().TrimEnd()}
        <!-- TODO: Add a system-scoped dependency for the developer's business logic JAR -->
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.5.2</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>";
            var filePath = Path.Combine(projectPath, "pom.xml");
            await File.WriteAllTextAsync(filePath, pomContent.Trim());
            _logger.LogDebug($"Generated pom.xml file for Java OCI at: {projectPath}");
        }

        public Task GenerateStartupFileAsync(string projectPath)
        {
            // The Java FDK uses a handler class defined in func.yaml, no separate startup file is needed.
            return Task.CompletedTask;
        }

        public async Task GeneratePlatformFilesAsync(string projectPath)
        {
            // OCI Functions have one entry point per function. We generate one for the first trigger.
            var triggerMethod = _blueprint.TriggerMethods.First();
            var handlerClassName = $"com.example.fn.{triggerMethod.MethodName}Function";

            var funcYamlContent = $@"
schema_version: 20180708
name: {_blueprint.ServiceName.ToLowerInvariant()}
version: {_blueprint.Metadata.SourceVersionTag.TrimStart('v')}
runtime: java
entrypoint: {handlerClassName}::{ToCamelCase(triggerMethod.MethodName)}
";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "func.yaml"), funcYamlContent.Trim());

            var dockerfileContent = $@"
# Auto-generated by 3SC DataLink
# Source Version: {_blueprint.Metadata.SourceVersionTag}
FROM fnproject/fn-java-fdk-build:jdk17-latest as build
WORKDIR /function
ADD pom.xml /function/
RUN mvn -B -e -C org.apache.maven.plugins:maven-dependency-plugin:3.3.0:go-offline
ADD . /function/
RUN mvn -B -e -o package

FROM fnproject/fn-java-fdk:jre17-latest
WORKDIR /function
COPY --from=build /function/target/*.jar /function/app/
# TODO: Add COPY command for the developer's business logic JAR
CMD [""{handlerClassName}::{ToCamelCase(triggerMethod.MethodName)}""]
";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "Dockerfile"), dockerfileContent.Trim());
            _logger.LogDebug($"Generated func.yaml and Dockerfile for OCI: {projectPath}");
        }

        private string GetMavenDependency(string groupId, string artifactId, string version, string scope = "")
        {
            var scopeXml = string.IsNullOrEmpty(scope) ? "" : $"        <scope>{scope}</scope>";
            return $@"        <dependency>
            <groupId>{groupId}</groupId>
            <artifactId>{artifactId}</artifactId>
            <version>{version}</version>
{scopeXml}
        </dependency>";
        }

        private string ToCamelCase(string input)
        {
            if (string.IsNullOrWhiteSpace(input)) return "unknown";
            return char.ToLowerInvariant(input[0]) + input.Substring(1);
        }
        public async Task GenerateFunctionFileAsync(TriggerMethod triggerMethod, string projectPath)
        {
            var functionClassName = $"{triggerMethod.MethodName}Function";
            var packageName = "com.example.fn";
            var packagePath = Path.Combine("src", "main", "java", "com", "example", "fn");
            var fullPath = Path.Combine(projectPath, packagePath);
            Directory.CreateDirectory(fullPath);

            var businessLogicHandlerType = triggerMethod.HandlerClassFullName;
            var handlerVarName = ToCamelCase(businessLogicHandlerType.Split('.').Last());
            var payload = triggerMethod.Parameters.First(p => p.IsPayload);
            var payloadTypeName = payload.TypeFullName.Split('.').Last();

            var imports = new HashSet<string>
            {
                businessLogicHandlerType,
                payload.TypeFullName
            };

            var sb = new StringBuilder();
            sb.AppendLine($"package {packageName};");
            sb.AppendLine();
            foreach (var import in imports.OrderBy(i => i)) sb.AppendLine($"import {import};");
            sb.AppendLine();
            sb.AppendLine($"// Auto-generated by 3SC DataLink at {DateTime.UtcNow:O}");
            sb.AppendLine($"// Source Version: {_blueprint.Metadata.SourceVersionTag}");
            sb.AppendLine();
            sb.AppendLine($"public class {functionClassName} {{");
            sb.AppendLine();
            sb.AppendLine($"    private final {businessLogicHandlerType} {handlerVarName};");
            sb.AppendLine();
            sb.AppendLine($"    public {functionClassName}() {{");
            sb.AppendLine($"        // In a real application, a DI framework like Dagger or Guice would be used here.");
            sb.AppendLine($"        this.{handlerVarName} = new {businessLogicHandlerType}();");
            sb.AppendLine("    }");
            sb.AppendLine();
            sb.AppendLine($"    public String {ToCamelCase(triggerMethod.MethodName)}({payloadTypeName} payload) {{");
            sb.AppendLine("        try {");
            sb.AppendLine($"            // Weave hook logic here");
            sb.AppendLine($"            this.{handlerVarName}.{ToCamelCase(triggerMethod.MethodName)}(payload);");
            sb.AppendLine("            return \"Request processed successfully.\";");
            sb.AppendLine("        } catch (Exception e) {");
            sb.AppendLine("            // Weave OnError logging here");
            sb.AppendLine("            return \"An error occurred: \" + e.getMessage();");
            sb.AppendLine("        }");
            sb.AppendLine("    }");
            sb.AppendLine("}");

            await File.WriteAllTextAsync(Path.Combine(fullPath, $"{functionClassName}.java"), sb.ToString());
            _logger.LogDebug($"Generated Java OCI handler file: {functionClassName}.java");
        }

        public async Task AssembleTestHarnessAsync(string testSourcePath, string testProjectPath, string mainProjectPath)
        {
            _logger.LogInfo("Assembling Java OCI test harness project...");
            var testPackagePath = Path.Combine("src", "test", "java", "com", "example", "fn");
            var fullTestPath = Path.Combine(testProjectPath, testPackagePath);
            Directory.CreateDirectory(fullTestPath);

            var handlerClassNameShort = _blueprint.HandlerClassFullName.Split('.').Last();
            var relevantTestFiles = Directory.GetFiles(testSourcePath, $"*{handlerClassNameShort}Test.java", SearchOption.AllDirectories);
            foreach (var testFile in relevantTestFiles)
            {
                File.Copy(testFile, Path.Combine(fullTestPath, Path.GetFileName(testFile)), true);
            }

            await GenerateSingleTestHarnessFileAsync(testPackagePath);
        }

        private async Task GenerateSingleTestHarnessFileAsync(string testPackagePath)
        {
            var triggerMethod = _blueprint.TriggerMethods.First();
            var functionClassName = $"{triggerMethod.MethodName}Function";
            var businessLogicHandlerType = _blueprint.HandlerClassFullName.Split('.').Last();
            var payloadType = triggerMethod.Parameters.First(p => p.IsPayload).TypeFullName.Split('.').Last();
            var harnessFileName = $"{functionClassName}HarnessTest.java";

            var harnessContent = $@"
package com.example.fn;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.fail;
import static org.mockito.Mockito.*;

// Import business logic classes
import {_blueprint.HandlerClassFullName};
import {triggerMethod.Parameters.First(p => p.IsPayload).TypeFullName};

// Auto-generated by 3SC DataLink. This test skeleton is designed to fail by default.
@ExtendWith(MockitoExtension.class)
public class {functionClassName}HarnessTest {{
    
    @Mock
    private {businessLogicHandlerType} mockBusinessLogicHandler;

    @InjectMocks
    private {functionClassName} functionToTest;

    @Test
    public void test{triggerMethod.MethodName}_HappyPath() {{
        // This test will fail here until you implement the mock setups and assertions.
        fail(""Test not yet implemented. Please configure mock setups and add assertions, then remove this line."");

        /* --- EXAMPLE IMPLEMENTATION ---
        // Arrange
        var payload = new {payloadType}();

        // Act
        // String result = functionToTest.{ToCamelCase(triggerMethod.MethodName)}(payload);

        // Assert
        // assertEquals(""Request processed successfully."", result);
        // verify(mockBusinessLogicHandler, times(1)).{ToCamelCase(triggerMethod.MethodName)}(any({payloadType}.class));
        */
    }}
}}";
            await File.WriteAllTextAsync(Path.Combine(testPackagePath, harnessFileName), harnessContent.Trim());
        }
    }
}
