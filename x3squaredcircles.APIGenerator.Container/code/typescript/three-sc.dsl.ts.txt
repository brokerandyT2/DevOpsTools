// 3SC API Assembler: TypeScript Decorator DSL
// Version: 6.0.0 (Definitive)
//
// To use, include this file in your business logic project.
// Requires "experimentalDecorators": true and "emitDecoratorMetadata": true in tsconfig.json
// and the 'reflect-metadata' package (`npm install reflect-metadata`).

import 'reflect-metadata';

/**
 * Defines when a logging hook should be executed.
 */
export enum LoggingAction {
    OnInbound = "OnInbound",
    OnOutbound = "OnOutbound",
    OnError = "OnError"
}

// A type alias for class constructors, used for type safety in decorators.
type Constructor<T = any> = new (...args: any[]) => T;

/**
 * Marks a class as a handler containing function entry points that the
 * 3SC API Assembler should process.
 */
export function FunctionHandler(): ClassDecorator {
    return (target) => {
        Reflect.defineMetadata('3sc:function-handler', true, target);
    };
}

/**
 * Groups related function entry points into a single deployable unit or service.
 */
export function DeploymentGroup(options: { serviceName: string; version: string }): ClassDecorator & MethodDecorator {
    return (target: any, propertyKey?: string | symbol) => {
        if (propertyKey) { // Applied to a method
            Reflect.defineMetadata('3sc:deployment-group', options, target.constructor, propertyKey);
        } else { // Applied to a class
            Reflect.defineMetadata('3sc:deployment-group', options, target);
        }
    };
}

/**
 * Marks a method as a function entry point and defines its event source using a URN.
 * @param eventUrn The Uniform Resource Name (URN) of the event source.
 *        Format: "cloud:service:resource-template:action"
 *        Example: "aws:s3:{customerUploadsBucket}:ObjectCreated:Put"
 */
export function EventSource(eventUrn: string): MethodDecorator {
    return (target, propertyKey) => {
        const sources = Reflect.getMetadata('3sc:event-sources', target.constructor, propertyKey) || [];
        sources.push({ eventUrn });
        Reflect.defineMetadata('3sc:event-sources', sources, target.constructor, propertyKey);
    };
}

/**
 * Injects a cross-cutting concern or pre-processing gate (e.g., for authentication).
 */
export function Requires(options: { handler: Constructor; method: string }): MethodDecorator {
    return (target, propertyKey) => {
        const requires = Reflect.getMetadata('3sc:requires', target.constructor, propertyKey) || [];
        requires.push({ handler: options.handler.name, method: options.method });
        Reflect.defineMetadata('3sc:requires', requires, targ