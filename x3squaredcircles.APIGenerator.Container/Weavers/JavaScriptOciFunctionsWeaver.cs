using System;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using x3squaredcircles.datalink.container.Models;
using x3squaredcircles.datalink.container.Services;
using x3squaredcircles.DataLink.Container.Weavers;

namespace x3squaredcircles.datalink.container.Weavers
{
    /// <summary>
    /// Implements ILanguageWeaver for generating a JavaScript OCI Functions project using the Fn Project FDK.
    /// </summary>
    public class JavaScriptOciFunctionsWeaver : ILanguageWeaver
    {
        private readonly IAppLogger _logger;
        private readonly ServiceBlueprint _blueprint;

        public JavaScriptOciFunctionsWeaver(IAppLogger logger, ServiceBlueprint blueprint)
        {
            _logger = logger;
            _blueprint = blueprint;
        }

        public async Task GenerateProjectFileAsync(string projectPath, string logicSourcePath)
        {
            var devDependencies = new StringBuilder();
            devDependencies.AppendLine(@"    ""jest"": ""^29.7.0""");

            var dependencies = new StringBuilder();
            dependencies.AppendLine(@"    ""@fnproject/fdk"": ""^0.0.19""");

            var packageJsonContent = $@"
{{
  ""name"": ""{_blueprint.ServiceName.ToLowerInvariant()}"",
  ""version"": ""1.0.0"",
  ""description"": ""Auto-generated by 3SC DataLink"",
  ""main"": ""func.js"",
  ""scripts"": {{
    ""test"": ""jest""
  }},
  ""dependencies"": {{
{dependencies.ToString().TrimEnd(',')}
  }},
  ""devDependencies"": {{
{devDependencies.ToString().TrimEnd(',')}
  }}
}}
";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "package.json"), packageJsonContent.Trim());

            var jestConfigContent = @"module.exports = {
  testEnvironment: 'node',
  testMatch: ['**/tests/**/*.test.js']
};";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "jest.config.js"), jestConfigContent.Trim());
        }

        public Task GenerateStartupFileAsync(string projectPath)
        {
            // The JavaScript FDK uses func.js as the entry point.
            return Task.CompletedTask;
        }

        public async Task GeneratePlatformFilesAsync(string projectPath)
        {
            var triggerMethod = _blueprint.TriggerMethods.First();
            var funcYamlContent = $@"
schema_version: 20180708
name: {_blueprint.ServiceName.ToLowerInvariant()}
version: {_blueprint.Metadata.SourceVersionTag.TrimStart('v')}
runtime: node
entrypoint: node func.js
";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "func.yaml"), funcYamlContent.Trim());

            var dockerfileContent = $@"
# Auto-generated by 3SC DataLink
# Source Version: {_blueprint.Metadata.SourceVersionTag}
FROM fnproject/node:18-dev as build-stage
WORKDIR /function
# TODO: Add steps to include the developer's business logic package
ADD . /function/
RUN npm install

FROM fnproject/node:18
WORKDIR /function
COPY --from=build-stage /function .
ENTRYPOINT [""node"", ""func.js""]
";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "Dockerfile"), dockerfileContent.Trim());
            _logger.LogDebug($"Generated func.yaml and Dockerfile for OCI: {projectPath}");
        }

        public async Task GenerateFunctionFileAsync(TriggerMethod triggerMethod, string projectPath)
        {
            // OCI Functions for Node.js use a single func.js entrypoint.
            var handlerClassName = _blueprint.HandlerClassFullName.Split('.').Last();
            var payload = triggerMethod.Parameters.First(p => p.IsPayload);

            var funcJsContent = $@"
// Auto-generated by 3SC DataLink at {DateTime.UtcNow:O}
// Source Version: {_blueprint.Metadata.SourceVersionTag}

const fdk = require('@fnproject/fdk');
// const {{ {handlerClassName} }} = require('./business-logic'); // Developer must configure path

// In a real application, a single instance of the handler would be created here.
// const handlerInstance = new {handlerClassName}();

fdk.handle(async function (input, ctx) {{
    console.log('Function {triggerMethod.MethodName} triggered.');

    try {{
        let payload = input;
        // The Fn FDK for Node passes the body directly if the content-type is JSON
        
        // Weave [Requires] hooks here.
        // Weave [RequiresLogger] OnInbound hooks here.

        // Invoke the business logic.
        // const result = await handlerInstance.{ToCamelCase(triggerMethod.MethodName)}(payload);
        
        return {{ 'message': 'Request processed successfully' }};
    }} catch (error) {{
        console.error('An error occurred:', error);
        // Weave [RequiresLogger] OnError hooks here.
        ctx.response.statusCode = 500;
        return {{ 'message': 'An error occurred.', 'error': error.message }};
    }}
}});
";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "func.js"), funcJsContent.Trim());
            _logger.LogDebug($"Generated JavaScript OCI handler file: func.js");
        }

        public async Task AssembleTestHarnessAsync(string testSourcePath, string testProjectPath, string mainProjectPath)
        {
            _logger.LogInfo("Assembling JavaScript OCI test harness project...");
            var testsPath = Path.Combine(testProjectPath, "tests");
            Directory.CreateDirectory(testsPath);

            var handlerClassNameShort = _blueprint.HandlerClassFullName.Split('.').Last();
            var relevantTestFiles = Directory.GetFiles(testSourcePath, $"*{handlerClassNameShort}.test.js", SearchOption.AllDirectories);
            foreach (var testFile in relevantTestFiles)
            {
                File.Copy(testFile, Path.Combine(testsPath, Path.GetFileName(testFile)), true);
            }

            await GenerateSingleTestHarnessFileAsync(testsPath);
        }

        private async Task GenerateSingleTestHarnessFileAsync(string testPackagePath)
        {
            var harnessFileName = "func.harness.test.js";
            var handlerClassName = _blueprint.HandlerClassFullName.Split('.').Last();
            var businessLogicModuleName = ToCamelCase(handlerClassName);
            var triggerMethod = _blueprint.TriggerMethods.First();

            var harnessContent = $@"
// Auto-generated by 3SC DataLink. This test skeleton is designed to fail by default.
const fdk = require('@fnproject/fdk');
jest.mock('@fnproject/fdk');

// Mock the business logic module
// jest.mock('../business-logic');
// const {{ {businessLogicModuleName} }} = require('../business-logic');

describe('Function Harness', () => {{
    it('should invoke the business logic handler', () => {{
        // This test will fail here until you implement the mock setups and assertions.
        throw new Error('Test not yet implemented. Please configure mocks and add assertions, then remove this line.');

        /* --- EXAMPLE IMPLEMENTATION ---
        // Arrange
        const mockMethod = {businessLogicModuleName}.prototype.{ToCamelCase(triggerMethod.MethodName)};
        const handler = require('../func.js'); // This will execute fdk.handle with our mock
        const mockFdkHandler = fdk.handle.mock.calls[0][0];

        const payload = {{ key: 'value' }};
        const mockContext = {{}};
        
        // Act
        // const result = await mockFdkHandler(payload, mockContext);
        
        // Assert
        // expect(mockMethod).toHaveBeenCalledTimes(1);
        // expect(result.message).toBe('Request processed successfully');
        */
    }});
}});
";
            await File.WriteAllTextAsync(Path.Combine(testPackagePath, harnessFileName), harnessContent.Trim());
        }

        private string ToCamelCase(string input)
        {
            if (string.IsNullOrWhiteSpace(input)) return "unknown";
            return char.ToLowerInvariant(input[0]) + input.Substring(1);
        }
    }
}