using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using x3squaredcircles.datalink.container.Models;
using x3squaredcircles.datalink.container.Services;
using x3squaredcircles.DataLink.Container.Weavers;

namespace x3squaredcircles.datalink.container.Weavers
{
    /// <summary>
    /// Implements ILanguageWeaver for generating a Go AWS Lambda project using SAM.
    /// </summary>
    public class GoAwsLambdaWeaver : ILanguageWeaver
    {
        private readonly IAppLogger _logger;
        private readonly ServiceBlueprint _blueprint;

        public GoAwsLambdaWeaver(IAppLogger logger, ServiceBlueprint blueprint)
        {
            _logger = logger;
            _blueprint = blueprint;
        }

        public async Task GenerateProjectFileAsync(string projectPath, string logicSourcePath)
        {
            // For Go, the primary project file is go.mod.
            var moduleName = _blueprint.ServiceName.ToLowerInvariant();
            var goModContent = $@"
module {moduleName}

go 1.21

require (
    github.com/aws/aws-lambda-go v1.47.0
)
";
            var filePath = Path.Combine(projectPath, "go.mod");
            await File.WriteAllTextAsync(filePath, goModContent.Trim());
            _logger.LogDebug($"Generated go.mod file: {filePath}");
        }

        public Task GenerateStartupFileAsync(string projectPath)
        {
            // Go on Lambda uses a simple main.go file, which is the startup and function handler.
            _logger.LogDebug("Go AWS Lambda startup logic will be generated in main.go.");
            return Task.CompletedTask;
        }

        public async Task GeneratePlatformFilesAsync(string projectPath)
        {
            var resources = new StringBuilder();
            foreach (var triggerMethod in _blueprint.TriggerMethods)
            {
                var trigger = triggerMethod.Triggers.First();
                var (eventType, eventProperties) = GetSamEvent(trigger);

                resources.AppendLine($@"  {triggerMethod.MethodName}Function:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: .
      Handler: bootstrap
      Runtime: go1.x
      Architectures:
        - x86_64
      Events:
        Trigger:
          Type: {eventType}
          Properties:
{eventProperties}");
            }

            var samTemplateContent = $@"
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  {_blueprint.ServiceName} - Auto-generated by 3SC DataLink from source version {_blueprint.Metadata.SourceVersionTag}

Resources:
{resources.ToString().TrimEnd()}
";
            var filePath = Path.Combine(projectPath, "template.yaml");
            await File.WriteAllTextAsync(filePath, samTemplateContent.Trim());
            _logger.LogDebug($"Generated template.yaml file: {filePath}");
        }

        public async Task GenerateFunctionFileAsync(TriggerMethod triggerMethod, string projectPath)
        {
            // In Go, it's idiomatic to have a single main.go that dispatches based on the invoker.
            // For simplicity, we'll generate a main.go for the first trigger.
            var mainGoFilePath = Path.Combine(projectPath, "main.go");
            if (File.Exists(mainGoFilePath))
            {
                _logger.LogDebug("main.go already exists, skipping generation.");
                return;
            }

            var payload = triggerMethod.Parameters.First(p => p.IsPayload);
            var handlerClassName = _blueprint.HandlerClassFullName.Split('.').Last();
            var handlerPackage = ToSnakeCase(handlerClassName);

            var mainGoContent = $@"
package main

import (
    ""context""
    ""encoding/json""
    ""fmt""

    ""github.com/aws/aws-lambda-go/lambda""
    ""github.com/aws/aws-lambda-go/events""

    // TODO: Developer needs to ensure their business logic package is available.
    // ""github.com/my-org/my-project/business_logic/{handlerPackage}""
)

// Auto-generated by 3SC DataLink at {DateTime.UtcNow:O}
// Source Version: {_blueprint.Metadata.SourceVersionTag}

// In a real application, a DI container would manage dependencies.
// var handler = {handlerPackage}.New{handlerClassName}()

func HandleRequest(ctx context.Context, event events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {{
    // This is the generated shim logic.
    fmt.Println(""Function '{triggerMethod.MethodName}' triggered."")

    var payload {payload.TypeFullName} // Assuming payload type is in the same package
    err := json.Unmarshal([]byte(event.Body), &payload)
    if err != nil {{
        return events.APIGatewayProxyResponse{{Body: ""Invalid request body"", StatusCode: 400}}, nil
    }}

    // Weave [Requires] hooks here.
    // Weave [RequiresLogger] OnInbound hooks here.

    // Invoke the business logic.
    // err = handler.{triggerMethod.MethodName}(payload)
    // if err != nil {{
    //     // Weave [RequiresLogger] OnError hooks here.
    //     return events.APIGatewayProxyResponse{{Body: ""Error processing request"", StatusCode: 500}}, nil
    // }}

    return events.APIGatewayProxyResponse{{Body: ""Request processed successfully"", StatusCode: 200}}, nil
}}

func main() {{
    lambda.Start(HandleRequest)
}}
";
            await File.WriteAllTextAsync(mainGoFilePath, mainGoContent.Trim());
            _logger.LogDebug($"Generated Go handler file: {mainGoFilePath}");
        }

        public async Task AssembleTestHarnessAsync(string testSourcePath, string testProjectPath, string mainProjectPath)
        {
            _logger.LogInfo("Assembling Go test harness project...");
            var testSrcPath = Path.Combine(testProjectPath, "tests");
            Directory.CreateDirectory(testSrcPath);

            var handlerClassNameShort = _blueprint.HandlerClassFullName.Split('.').Last();
            var relevantTestFiles = Directory.GetFiles(testSourcePath, $"*{ToSnakeCase(handlerClassNameShort)}_test.go", SearchOption.AllDirectories);
            foreach (var testFile in relevantTestFiles)
            {
                File.Copy(testFile, Path.Combine(testSrcPath, Path.GetFileName(testFile)), true);
            }

            foreach (var triggerMethod in _blueprint.TriggerMethods)
            {
                await GenerateSingleTestHarnessFileAsync(triggerMethod, testSrcPath);
            }
        }

        private async Task GenerateSingleTestHarnessFileAsync(TriggerMethod triggerMethod, string testPackagePath)
        {
            var harnessFileName = $"main_harness_test.go";

            var harnessContent = $@"
package main_test

import (
    ""context""
    ""testing""

    ""github.com/aws/aws-lambda-go/events""
    ""github.com/stretchr/testify/assert""

    // TODO: Developer would import their mocks and the generated main package
)

// Auto-generated by 3SC DataLink. This test skeleton is designed to fail by default.
func TestHandleRequest_Harness(t *testing.T) {{
    t.Fatal(""Test not yet implemented. Please configure mock setups and add assertions."")

    /* --- EXAMPLE IMPLEMENTATION ---
    // Arrange
    // mockCtrl := gomock.NewController(t)
    // defer mockCtrl.Finish()
    // mockHandler := mocks.NewMockMyHandler(mockCtrl)
    
    // Inject the mock into the handler (requires DI in the main package)
    // main.SetHandler(mockHandler)

    // mockHandler.EXPECT().MyMethod(gomock.Any()).Return(nil)
    
    request := events.APIGatewayProxyRequest{{
        Body: `{{""key"":""value""}}`,
    }}

    // Act
    // response, err := main.HandleRequest(context.TODO(), request)

    // Assert
    // assert.NoError(t, err)
    // assert.Equal(t, 200, response.StatusCode)
    */
}}
";
            await File.WriteAllTextAsync(Path.Combine(testPackagePath, harnessFileName), harnessContent.Trim());
        }

        private (string, string) GetSamEvent(TriggerDefinition trigger)
        {
            switch (trigger.Type)
            {
                case "Http":
                    var path = trigger.Name.StartsWith("/") ? trigger.Name : "/" + trigger.Name;
                    var method = trigger.Properties.GetValueOrDefault("Method", "post")?.ToLowerInvariant();
                    return ("Api", $"            Path: {path}\n            Method: {method}");
                default:
                    return ("Api", "            Path: /default\n            Method: post");
            }
        }

        private string ToSnakeCase(string input)
        {
            if (string.IsNullOrWhiteSpace(input)) return "unknown";
            return string.Concat(input.Select((x, i) => i > 0 && char.IsUpper(x) ? "_" + x.ToString() : x.ToString())).ToLower();
        }
    }
}