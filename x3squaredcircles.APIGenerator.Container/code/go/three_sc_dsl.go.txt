// 3SC API Assembler: Go Comment Directive DSL
// Version: 6.0.0 (Definitive)
//
// This file serves as documentation for the comment-based directives used by the Assembler.
// To use, add comments with the specified format directly above your types and methods.

package dsl

// @FunctionHandler marks a struct as a handler containing function entry points
// that the 3SC API Assembler should process.
// Example:
//   // @FunctionHandler
//   type FileProcessor struct { ... }
const FunctionHandler = `// @FunctionHandler`

// @DeploymentGroup groups related function entry points into a single deployable unit.
// It can be applied to a struct (for all methods) or a single method.
// Example on a struct:
//   // @DeploymentGroup serviceName="AssetProcessor" version="v1.2"
//   // @FunctionHandler
//   type AssetHandler struct { ... }
//
// Example on a method:
//   // @DeploymentGroup serviceName="ReportingApi" version="v3"
//   // @EventSource eventUrn="aws:apigateway:proxy:/reports/monthly:GET"
//   func (h *AssetHandler) GenerateMonthlyReport(request events.APIGatewayProxyRequest) error { ... }
const DeploymentGroup = `// @DeploymentGroup serviceName="MyService" version="v1"`

// @EventSource marks a method as a function entry point and defines its event source using a URN.
//
// The URN format is "cloud:service:resource-template:action".
// Placeholders like {customerUploadsBucket} are resolved from pipeline variables.
//
// Example:
//   // @EventSource eventUrn="aws:s3:{customerUploadsBucket}:ObjectCreated:Put"
//   func (h *FileProcessor) HandleNewUpload(s3Event events.S3Event) error { ... }
const EventSource = `// @EventSource eventUrn="cloud:service:{placeholder}:action"`

// @Requires injects a cross-cutting concern or pre-processing gate (e.g., for authentication).
// The handler value should be the fully qualified name of the hook function or method.
//
// Example:
//   // @Requires handler="github.com/my-org/hooks.ValidateJwt"
//   // @EventSource eventUrn="aws:apigateway:proxy:/admin/tasks:POST"
//   func (h *AdminHandler) CreateAdminTask(request events.APIGatewayProxyRequest) error { ... }
const Requires = `// @Requires handler="mypackage.MyHookFunction"`

// @RequiresLogger injects an observability or logging hook.
// Supported actions: OnInbound, OnOutbound, OnError.
//
// Example:
//   // @RequiresLogger handler="github.com/my-org/loggers.LogRequest" action="OnInbound"
//   // @EventSource eventUrn="aws:sqs:{newOrdersQueue}:MessageReceived"
//   func (h *OrderHandler) ProcessNewOrder(sqsEvent events.SQSEvent) error { ... }
const RequiresLogger = `// @RequiresLogger handler="mypackage.MyLoggerFunction" action="OnInbound"`