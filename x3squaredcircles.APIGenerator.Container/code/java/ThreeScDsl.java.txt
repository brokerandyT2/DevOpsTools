// 3SC API Assembler: Java Annotation DSL
// Version: 6.0.0 (Definitive)
//
// To use, simply include this file (or package) in your business logic project.

package com.threese.assembler.annotations;

import java.lang.annotation.*;

public class Dsl {

    /**
     * Defines when a logging hook should be executed.
     */
    public enum LoggingAction {
        ON_INBOUND,
        ON_OUTBOUND,
        ON_ERROR
    }

    /**
     * Marks a class as a handler containing function entry points that the
     * 3SC API Assembler should process.
     */
    @Retention(RetentionPolicy.CLASS)
    @Target(ElementType.TYPE)
    public @interface FunctionHandler {
    }

    /**
     * Groups related function entry points into a single deployable unit or service.
     */
    @Retention(RetentionPolicy.CLASS)
    @Target({ElementType.TYPE, ElementType.METHOD})
    public @interface DeploymentGroup {
        String serviceName();
        String version();
    }

    /**
     * Marks a method as a function entry point and defines its event source using a URN.
     */
    @Retention(RetentionPolicy.CLASS)
    @Target(ElementType.METHOD)
    @Repeatable(EventSources.class)
    public @interface EventSource {
        /**
         * The Uniform Resource Name (URN) of the event source.
         * Format: "cloud:service:resource-template:action"
         * Example: "aws:s3:{customerUploadsBucket}:ObjectCreated:Put"
         * Placeholders are resolved from pipeline variables (e.g., ASSEMBLER_CUSTOM_CUSTOMERUPLOADSBUCKET).
         */
        String eventUrn();
    }

    /**
     * Container for repeatable @EventSource annotations.
     */
    @Retention(RetentionPolicy.CLASS)
    @Target(ElementType.METHOD)
    public @interface EventSources {
        EventSource[] value();
    }

    /**
     * Injects a cross-cutting concern or pre-processing gate (e.g., for authentication).
     */
    @Retention(RetentionPolicy.CLASS)
    @Target(ElementType.METHOD)
    @Repeatable(RequiresList.class)
    public @interface Requires {
        Class<?> handler();
        String method();
    }

    /**
     * Container for repeatable @Requires annotations.
     */
    @Retention(RetentionPolicy.CLASS)
    @Target(ElementType.METHOD)
    public @interface RequiresList {
        Requires[] value();
    }
    
    /**
     * Injects an observability or logging hook into the function's execution pipeline.
     */
    @Retention(RetentionPolicy.CLASS)
    @Target(ElementType.METHOD)
    @Repeatable(RequiresLoggers.class)
    public @interface RequiresLogger {
        Class<?> handler();
        LoggingAction action();
    }

    /**
     * Container for repeatable @RequiresLogger annotations.
     */
    @Retention(RetentionPolicy.CLASS)
    @Target(ElementType.METHOD)
    public @interface RequiresLoggers {
        RequiresLogger[] value();
    }
}