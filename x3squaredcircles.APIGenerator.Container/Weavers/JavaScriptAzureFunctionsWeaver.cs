using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using x3squaredcircles.datalink.container.Models;
using x3squaredcircles.datalink.container.Services;

namespace x3squaredcircles.DataLink.Container.Weavers
{
    public class JavaScriptAzureFunctionsWeaver : ScriptingWeaverBase
    {
        public JavaScriptAzureFunctionsWeaver(IAppLogger logger, ServiceBlueprint blueprint)
            : base(logger, blueprint) { }

        protected override string GetDeveloperTestFilePattern(string handlerClassNameShort) => $"*{handlerClassNameShort}.test.js";
        protected override string GetHandlerFileName() => "index.js";

        public override async Task GenerateProjectFileAsync(string projectPath, string logicSourcePath)
        {
            var devDependencies = new StringBuilder();
            devDependencies.AppendLine(@"    ""jest"": ""^29.7.0""");

            var dependencies = new StringBuilder();
            dependencies.AppendLine(@"    ""@azure/functions"": ""^4.0.0""");

            var packageJsonContent = $@"
{{
  ""name"": ""{_blueprint.ServiceName.ToLowerInvariant()}"",
  ""version"": ""1.0.0"",
  ""description"": ""Auto-generated by 3SC DataLink"",
  ""main"": ""{_blueprint.TriggerMethods.First().MethodName}/index.js"",
  ""scripts"": {{
    ""start"": ""func start"",
    ""test"": ""jest""
  }},
  ""dependencies"": {{
{dependencies.ToString().TrimEnd(',')}
  }},
  ""devDependencies"": {{
{devDependencies.ToString().TrimEnd(',')}
  }}
}}";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "package.json"), packageJsonContent.Trim());

            var jestConfigContent = @"module.exports = { testEnvironment: 'node' };";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "jest.config.js"), jestConfigContent.Trim());

            var destLogicPath = Path.Combine(projectPath, "business_logic");
            CopyDirectory(logicSourcePath, destLogicPath);
        }

        public override Task GenerateStartupFileAsync(string projectPath)
        {
            return Task.CompletedTask;
        }

        public override async Task GeneratePlatformFilesAsync(string projectPath)
        {
            var hostJsonContent = @"{""version"": ""2.0"", ""logging"": {""applicationInsights"": {""samplingSettings"": {""isEnabled"": true, ""excludedTypes"": ""Request""}}}, ""extensionBundle"": {""id"": ""Microsoft.Azure.Functions.ExtensionBundle"", ""version"": ""[4.*, 5.0.0)""}}";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "host.json"), hostJsonContent.Trim());

            var settingsJsonContent = @"{""IsEncrypted"": false, ""Values"": {""AzureWebJobsStorage"": ""UseDevelopmentStorage=true"", ""FUNCTIONS_WORKER_RUNTIME"": ""node""}}";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "local.settings.json"), settingsJsonContent.Trim());

            foreach (var triggerMethod in _blueprint.TriggerMethods)
            {
                var functionPath = Path.Combine(projectPath, triggerMethod.MethodName);
                Directory.CreateDirectory(functionPath);

                var eventSource = triggerMethod.DslAttributes.First(a => a.Name == "EventSource");
                var bindings = ParseUrnForFunctionJson(eventSource.Arguments["EventUrn"]);

                var functionJson = JsonSerializer.Serialize(new { bindings }, new JsonSerializerOptions { WriteIndented = true });
                await File.WriteAllTextAsync(Path.Combine(functionPath, "function.json"), functionJson);
            }
        }

        public override async Task GenerateFunctionFileAsync(TriggerMethod triggerMethod, string projectPath)
        {
            var functionPath = Path.Combine(projectPath, triggerMethod.MethodName);
            Directory.CreateDirectory(functionPath);
            var handlerFilePath = Path.Combine(functionPath, GetHandlerFileName());

            var handlerClassName = _blueprint.HandlerClassFullName.Split('.').Last();
            var handlerVarName = ToCamelCase(handlerClassName);
            var businessLogicCallParams = string.Join(", ", triggerMethod.Parameters.Select(p => p.Name));

            var handlerContent = $@"
// Auto-generated by 3SC DataLink
const {{ {handlerClassName} }} = require('../business_logic/{ToSnakeCase(handlerClassName)}.js'); // Assuming business logic structure
const handlerInstance = new {handlerClassName}();

module.exports = async function (context, req) {{
    context.log('JavaScript HTTP trigger function processed a request.');
    try {{
        const payload = (req.query.payload || (req.body && req.body));
        const result = await handlerInstance.{ToCamelCase(triggerMethod.MethodName)}(payload);

        context.res = {{
            status: 200,
            body: result || {{ message: 'Success' }},
            headers: {{ 'Content-Type': 'application/json' }}
        }};
    }} catch (error) {{
        context.log.error('An error occurred:', error);
        context.res = {{
            status: 500,
            body: ""An error occurred during execution.""
        }};
    }}
}};
";
            await File.WriteAllTextAsync(handlerFilePath, handlerContent.Trim());
        }

        protected override async Task GenerateSingleTestHarnessFileAsync(TriggerMethod triggerMethod, string testPackagePath)
        {
            var harnessFileName = $"{triggerMethod.MethodName}.harness.test.js";
            await File.WriteAllTextAsync(Path.Combine(testPackagePath, harnessFileName), "// TODO: Implement JavaScript Azure test harness");
        }

        private List<object> ParseUrnForFunctionJson(string urn)
        {
            var parts = urn.Split(':');
            var bindings = new List<object>();
            if (parts.Length < 4) return bindings;

            var service = parts[1].ToLowerInvariant();
            var resource = parts[2];
            var action = string.Join(":", parts.Skip(3));

            switch (service)
            {
                case "apigateway":
                    bindings.Add(new
                    {
                        authLevel = "anonymous",
                        type = "httpTrigger",
                        direction = "in",
                        name = "req",
                        methods = new[] { action.ToLowerInvariant() },
                        route = resource.TrimStart('/')
                    });
                    bindings.Add(new { type = "http", direction = "out", name = "res" });
                    break;
                case "servicebus":
                    bindings.Add(new
                    {
                        type = "serviceBusTrigger",
                        direction = "in",
                        name = "message",
                        queueName = resource,
                        connection = "ServiceBusConnection"
                    });
                    break;
            }
            return bindings;
        }

        private void CopyDirectory(string sourceDir, string destinationDir)
        {
            var dir = new DirectoryInfo(sourceDir);
            if (!dir.Exists) return;

            Directory.CreateDirectory(destinationDir);
            foreach (FileInfo file in dir.GetFiles())
            {
                file.CopyTo(Path.Combine(destinationDir, file.Name), true);
            }
            foreach (DirectoryInfo subDir in dir.GetDirectories())
            {
                if (subDir.Name != "tests" && subDir.Name != ".git" && subDir.Name != "node_modules")
                {
                    CopyDirectory(subDir.FullName, Path.Combine(destinationDir, subDir.Name));
                }
            }
        }
    }
}