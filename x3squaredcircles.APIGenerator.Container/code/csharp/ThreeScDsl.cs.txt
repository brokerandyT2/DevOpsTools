// 3SC API Assembler: C# Attribute DSL
// Version: 6.0.0 (Definitive)
//
// To use, simply include this file in your business logic project.

using System;

namespace _3SC.Assembler.Attributes
{
    /// <summary>
    /// Defines when a logging hook should be executed.
    /// </summary>
    public enum LoggingAction { OnInbound, OnOutbound, OnError }

    /// <summary>
    /// Marks a class as a handler containing function entry points that the
    /// 3SC API Assembler should process.
    /// </summary>
    [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
    public sealed class FunctionHandlerAttribute : Attribute
    {
    }

    /// <summary>
    /// Groups related function entry points into a single deployable unit or service.
    /// This allows the 'assembler build' and 'assembler deploy' commands to target
    /// a specific microservice within a larger monorepo.
    /// </summary>
    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, Inherited = true, AllowMultiple = false)]
    public sealed class DeploymentGroupAttribute : Attribute
    {
        public string ServiceName { get; }
        public string Version { get; }

        public DeploymentGroupAttribute(string serviceName, string version)
        {
            ServiceName = serviceName;
            Version = version;
        }
    }

    /// <summary>
    /// Marks a method as a function entry point and defines its event source using a URN.
    /// The 'assembler discover-vars' command can be used to generate a list of all
    /// placeholders used in these attributes across the codebase.
    /// </summary>
    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = true)]
    public sealed class EventSourceAttribute : Attribute
    {
        public string EventUrn { get; }

        public EventSourceAttribute(string eventUrn)
        {
            if (string.IsNullOrWhiteSpace(eventUrn))
                throw new ArgumentNullException(nameof(eventUrn));

            EventUrn = eventUrn;
        }
    }

    /// <summary>
    /// Injects a cross-cutting concern or pre-processing gate (e.g., for authentication or validation)
    /// that runs before the primary business logic. The specified handler method must return a boolean.
    /// </summary>
    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = true)]
    public sealed class RequiresAttribute : Attribute
    {
        public Type Handler { get; }
        public string Method { get; }

        public RequiresAttribute(Type handler, string method)
        {
            Handler = handler;
            Method = method;
        }
    }

    /// <summary>
    /// Injects an observability or logging hook into the function's execution pipeline.
    /// </summary>
    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = true)]
    public sealed class RequiresLoggerAttribute : Attribute
    {
        public Type Handler { get; }
        public LoggingAction Action { get; }

        public RequiresLoggerAttribute(Type handler, LoggingAction action)
        {
            Handler = handler;
            Action = action;
        }
    }
}