using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using x3squaredcircles.datalink.container.Models;
using x3squaredcircles.datalink.container.Services;
using x3squaredcircles.DataLink.Container.Weavers;

namespace x3squaredcircles.datalink.container.Weavers
{
    /// <summary>
    /// Implements ILanguageWeaver for generating a JavaScript AWS Lambda project using SAM.
    /// </summary>
    public class JavaScriptAwsLambdaWeaver : ILanguageWeaver
    {
        private readonly IAppLogger _logger;
        private readonly ServiceBlueprint _blueprint;

        public JavaScriptAwsLambdaWeaver(IAppLogger logger, ServiceBlueprint blueprint)
        {
            _logger = logger;
            _blueprint = blueprint;
        }

        public async Task GenerateProjectFileAsync(string projectPath, string logicSourcePath)
        {
            var devDependencies = new StringBuilder();
            devDependencies.AppendLine(@"    ""jest"": ""^29.7.0""");

            var packageJsonContent = $@"
{{
  ""name"": ""{_blueprint.ServiceName}"",
  ""version"": ""1.0.0"",
  ""description"": ""Auto-generated by 3SC DataLink"",
  ""main"": ""src/handler.js"",
  ""scripts"": {{
    ""test"": ""jest""
  }},
  ""devDependencies"": {{
{devDependencies.ToString().TrimEnd(',')}
  }},
  ""dependencies"": {{
    ""aws-lambda"": ""^1.0.7""
  }}
}}
";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "package.json"), packageJsonContent.Trim());

            var jestConfigContent = @"module.exports = {
  testEnvironment: 'node',
};";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "jest.config.js"), jestConfigContent.Trim());
        }

        public Task GenerateStartupFileAsync(string projectPath)
        {
            // Node.js on Lambda uses a simple handler file, not a complex startup class.
            return Task.CompletedTask;
        }

        public async Task GeneratePlatformFilesAsync(string projectPath)
        {
            var resources = new StringBuilder();
            foreach (var triggerMethod in _blueprint.TriggerMethods)
            {
                var trigger = triggerMethod.Triggers.First();
                var handlerPath = $"src/handler.{triggerMethod.MethodName}";
                var (eventType, eventProperties) = GetSamEvent(trigger);

                resources.AppendLine($@"  {triggerMethod.MethodName}Function:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: src/
      Handler: {handlerPath}
      Runtime: nodejs20.x
      Architectures: [ x86_64 ]
      Events:
        Trigger:
          Type: {eventType}
          Properties:
{eventProperties}");
            }

            var samTemplateContent = $@"
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  {_blueprint.ServiceName} - Auto-generated by 3SC DataLink from source version {_blueprint.Metadata.SourceVersionTag}

Resources:
{resources.ToString().TrimEnd()}
";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "template.yaml"), samTemplateContent.Trim());
        }

        public async Task GenerateFunctionFileAsync(TriggerMethod triggerMethod, string projectPath)
        {
            var srcPath = Path.Combine(projectPath, "src");
            Directory.CreateDirectory(srcPath);

            var handlerClassName = _blueprint.HandlerClassFullName.Split('.').Last();
            var handlerVarName = ToCamelCase(handlerClassName);

            // In JavaScript, we would generate a single handler file with multiple exported functions.
            var handlerFilePath = Path.Combine(srcPath, "handler.js");
            var handlerContent = new StringBuilder();

            if (!File.Exists(handlerFilePath))
            {
                handlerContent.AppendLine($"// Auto-generated by 3SC DataLink at {DateTime.UtcNow:O}");
                handlerContent.AppendLine($"// Source Version: {_blueprint.Metadata.SourceVersionTag}");
                handlerContent.AppendLine();
                handlerContent.AppendLine($"// const {{ {handlerClassName} }} = require('../business-logic'); // Developer must configure path");
                handlerContent.AppendLine();
            }

            handlerContent.AppendLine($"exports.{triggerMethod.MethodName} = async (event) => {{");
            handlerContent.AppendLine("    try {");
            handlerContent.AppendLine("        const payload = JSON.parse(event.body || '{}');");
            handlerContent.AppendLine("        console.log(`Processing payload for {triggerMethod.MethodName}:`, payload);");
            handlerContent.AppendLine();
            handlerContent.AppendLine($"        // const handlerInstance = new {handlerClassName}();");
            handlerContent.AppendLine($"        // await handlerInstance.{ToCamelCase(triggerMethod.MethodName)}(payload);");
            handlerContent.AppendLine();
            handlerContent.AppendLine("        return { statusCode: 200, body: JSON.stringify({ message: 'Request processed successfully.' }) };");
            handlerContent.AppendLine("    } catch (error) {");
            handlerContent.AppendLine("        console.error('An error occurred:', error);");
            handlerContent.AppendLine("        return { statusCode: 500, body: JSON.stringify({ message: 'An error occurred.' }) };");
            handlerContent.AppendLine("    }");
            handlerContent.AppendLine("};");
            handlerContent.AppendLine();

            await File.WriteAllTextAsync(handlerFilePath, handlerContent.ToString());
        }

        public async Task AssembleTestHarnessAsync(string testSourcePath, string testProjectPath, string mainProjectPath)
        {
            _logger.LogInfo("Assembling JavaScript test harness project...");
            var testSrcPath = Path.Combine(testProjectPath, "tests");
            Directory.CreateDirectory(testSrcPath);

            var handlerClassNameShort = _blueprint.HandlerClassFullName.Split('.').Last();
            var relevantTestFiles = Directory.GetFiles(testSourcePath, $"*{handlerClassNameShort}.test.js", SearchOption.AllDirectories);
            foreach (var testFile in relevantTestFiles)
            {
                File.Copy(testFile, Path.Combine(testSrcPath, Path.GetFileName(testFile)), true);
            }

            foreach (var triggerMethod in _blueprint.TriggerMethods)
            {
                await GenerateSingleTestHarnessFileAsync(triggerMethod, testSrcPath);
            }
        }

        private async Task GenerateSingleTestHarnessFileAsync(TriggerMethod triggerMethod, string testPackagePath)
        {
            var handlerModuleName = "handler";
            var businessLogicModuleName = ToCamelCase(_blueprint.HandlerClassFullName.Split('.').Last());
            var harnessFileName = $"handler.{triggerMethod.MethodName}.harness.test.js";

            var harnessContent = $@"
const handler = require('../../src/{handlerModuleName}');
// Mock the entire business logic module, assuming it's in a predictable location
// jest.mock('../business-logic');
// const {{ {businessLogicModuleName} }} = require('../business-logic');

describe('{triggerMethod.MethodName} harness', () => {{
    it('should invoke the business logic handler', () => {{
        // This test will fail here until you implement the mock setups and assertions.
        throw new Error('Test not yet implemented. Please configure mocks and add assertions, then remove this line.');

        /* --- EXAMPLE IMPLEMENTATION ---
        // Arrange
        const mockMethod = {businessLogicModuleName}.prototype.{ToCamelCase(triggerMethod.MethodName)};
        
        const mockEvent = {{
            body: JSON.stringify({{ key: 'value' }})
        }};
        
        // Act
        // await handler.{triggerMethod.MethodName}(mockEvent);
        
        // Assert
        // expect(mockMethod).toHaveBeenCalledTimes(1);
        */
    }});
}});
";
            await File.WriteAllTextAsync(Path.Combine(testPackagePath, harnessFileName), harnessContent.Trim());
        }

        private (string, string) GetSamEvent(TriggerDefinition trigger)
        {
            switch (trigger.Type)
            {
                case "Http":
                    var path = trigger.Name.StartsWith("/") ? trigger.Name : "/" + trigger.Name;
                    var method = trigger.Properties.GetValueOrDefault("Method", "post")?.ToLowerInvariant();
                    return ("Api", $"            Path: {path}\n            Method: {method}");
                default:
                    return ("Api", "            Path: /default\n            Method: post");
            }
        }

        private string ToCamelCase(string input)
        {
            if (string.IsNullOrWhiteSpace(input)) return "unknown";
            return char.ToLowerInvariant(input[0]) + input.Substring(1);
        }
    }
}