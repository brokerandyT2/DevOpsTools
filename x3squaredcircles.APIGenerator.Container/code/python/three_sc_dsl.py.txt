# 3SC Conduit: Python Decorator DSL
# Version: 1.0.0
# Auto-generated by 3SC DataLink. Do not modify.
from enum import Enum

class TriggerType(Enum):
    HTTP = "Http"
    AZURE_SERVICE_BUS_QUEUE = "AzureServiceBusQueue"
    AWS_SQS_QUEUE = "AwsSqsQueue"
    KAFKA_TOPIC = "KafkaTopic"
    CRON = "Cron"
    SCAFFOLD = "Scaffold"

class LoggingAction(Enum):
    ON_INBOUND = "OnInbound"
    ON_OUTBOUND = "OnOutbound"
    ON_ERROR = "OnError"

def data_consumer(service_name=None):
    def decorator(cls):
        setattr(cls, '_3sc_dataconsumer', {'service_name': service_name or cls.__name__})
        return cls
    return decorator

def trigger(type, name="", method="POST"):
    def decorator(func):
        if not hasattr(func, '_3sc_triggers'):
            setattr(func, '_3sc_triggers', [])
        getattr(func, '_3sc_triggers').append({'type': type.value, 'name': name, 'method': method})
        return func
    return decorator

def requires(handler, method):
    def decorator(func):
        if not hasattr(func, '_3sc_requires'):
            setattr(func, '_3sc_requires', [])
        getattr(func, '_3sc_requires').append({'handler': f"{handler.__module__}.{handler.__name__}", 'method': method})
        return func
    return decorator

def requires_logger(handler, action):
    def decorator(func):
        if not hasattr(func, '_3sc_requires_loggers'):
            setattr(func, '_3sc_requires_loggers', [])
        getattr(func, '_3sc_requires_loggers').append({'handler': f"{handler.__module__}.{handler.__name__}", 'action': action.value})
        return func
    return decorator

def requires_results_logger(handler, method, variable):
    def decorator(func):
        if not hasattr(func, '_3sc_requires_results_loggers'):
            setattr(func, '_3sc_requires_results_loggers', [])
        getattr(func, '_3sc_requires_results_loggers').append({'handler': f"{handler.__module__}.{handler.__name__}", 'method': method, 'variable': variable})
        return func
    return decorator

def use_template(template_path):
    def decorator(func):
        setattr(func, '_3sc_use_template', {'template_path': template_path})
        return func
    return decorator