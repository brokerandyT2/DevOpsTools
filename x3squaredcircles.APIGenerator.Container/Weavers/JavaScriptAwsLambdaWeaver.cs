using System;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using x3squaredcircles.datalink.container.Models;
using x3squaredcircles.datalink.container.Services;

namespace x3squaredcircles.DataLink.Container.Weavers
{
    public class JavaScriptAwsLambdaWeaver : ScriptingWeaverBase
    {
        public JavaScriptAwsLambdaWeaver(IAppLogger logger, ServiceBlueprint blueprint)
            : base(logger, blueprint) { }

        protected override string GetDeveloperTestFilePattern(string handlerClassNameShort) => $"*{handlerClassNameShort}.test.js";
        protected override string GetHandlerFileName() => "handler.js";

        public override async Task GenerateProjectFileAsync(string projectPath, string logicSourcePath)
        {
            var devDependencies = new StringBuilder();
            devDependencies.AppendLine(@"    ""jest"": ""^29.7.0""");

            var packageJsonContent = $@"
{{
  ""name"": ""{_blueprint.ServiceName.ToLowerInvariant()}"",
  ""version"": ""1.0.0"",
  ""description"": ""Auto-generated by 3SC DataLink"",
  ""main"": ""handler.js"",
  ""scripts"": {{
    ""test"": ""jest""
  }},
  ""devDependencies"": {{
{devDependencies.ToString().TrimEnd(',')}
  }},
  ""dependencies"": {{
    ""aws-lambda"": ""^1.0.7""
  }}
}}";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "package.json"), packageJsonContent.Trim());

            var jestConfigContent = @"module.exports = { testEnvironment: 'node' };";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "jest.config.js"), jestConfigContent.Trim());

            var destLogicPath = Path.Combine(projectPath, "business_logic");
            CopyDirectory(logicSourcePath, destLogicPath);
        }

        public override Task GenerateStartupFileAsync(string projectPath)
        {
            return Task.CompletedTask;
        }

        public override async Task GeneratePlatformFilesAsync(string projectPath)
        {
            var resources = new StringBuilder();

            foreach (var triggerMethod in _blueprint.TriggerMethods)
            {
                var eventSource = triggerMethod.DslAttributes.First(a => a.Name == "EventSource");
                var (eventType, eventProperties) = ParseUrnForSam(eventSource.Arguments["EventUrn"]);

                var handlerPath = GetHandlerPath(triggerMethod.MethodName);

                resources.AppendLine($@"  {triggerMethod.MethodName}Function:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: .
      Handler: {handlerPath}
      Runtime: nodejs20.x
      Architectures: [ x86_64 ]
      Events:
        Trigger:
          Type: {eventType}
          Properties:
{eventProperties}");
            }

            var samTemplateContent = $@"
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  {_blueprint.ServiceName} - Auto-generated by 3SC DataLink from source version {_blueprint.Metadata.SourceVersionTag}

Resources:
{resources.ToString().TrimEnd()}
";
            await File.WriteAllTextAsync(Path.Combine(projectPath, "template.yaml"), samTemplateContent.Trim());
        }

        public override async Task GenerateFunctionFileAsync(TriggerMethod triggerMethod, string projectPath)
        {
            var handlerFilePath = Path.Combine(projectPath, GetHandlerFileName());
            var handlerClassName = _blueprint.HandlerClassFullName.Split('.').Last();
            var handlerVarName = ToCamelCase(handlerClassName);

            var sb = new StringBuilder();
            if (!File.Exists(handlerFilePath))
            {
                // Create the file shell if it's the first time.
                sb.AppendLine("// Auto-generated by 3SC DataLink");
                sb.AppendLine();
                sb.AppendLine($"const {{ {handlerClassName} }} = require('./business_logic/{ToSnakeCase(handlerClassName)}.js'); // Assuming business logic structure");
                sb.AppendLine();
                sb.AppendLine($"const handlerInstance = new {handlerClassName}();");
                sb.AppendLine();
            }

            // A parameter list simplified for JavaScript
            var businessLogicCallParams = string.Join(", ", triggerMethod.Parameters.Select(p => p.Name));

            sb.AppendLine($"exports.{triggerMethod.MethodName} = async (event) => {{");
            sb.AppendLine("    try {");
            sb.AppendLine("        // Simplified payload extraction for HTTP triggers");
            sb.AppendLine("        const payload = JSON.parse(event.body || '{}');");
            sb.AppendLine();
            sb.AppendLine($"        const result = await handlerInstance.{ToCamelCase(triggerMethod.MethodName)}(payload);");
            sb.AppendLine();
            sb.AppendLine("        return { statusCode: 200, body: JSON.stringify(result || { message: 'Success' }) };");
            sb.AppendLine("    } catch (error) {");
            sb.AppendLine("        console.error('An error occurred:', error);");
            sb.AppendLine("        return { statusCode: 500, body: JSON.stringify({ message: 'An error occurred.' }) };");
            sb.AppendLine("    }");
            sb.AppendLine("};");
            sb.AppendLine();

            await File.AppendAllTextAsync(handlerFilePath, sb.ToString());
        }

        protected override async Task GenerateSingleTestHarnessFileAsync(TriggerMethod triggerMethod, string testPackagePath)
        {
            var harnessFileName = $"handler.{triggerMethod.MethodName}.harness.test.js";
            await File.WriteAllTextAsync(Path.Combine(testPackagePath, harnessFileName), "// TODO: Implement JavaScript AWS test harness");
        }

        private void CopyDirectory(string sourceDir, string destinationDir)
        {
            var dir = new DirectoryInfo(sourceDir);
            if (!dir.Exists) return;

            Directory.CreateDirectory(destinationDir);
            foreach (FileInfo file in dir.GetFiles())
            {
                file.CopyTo(Path.Combine(destinationDir, file.Name), true);
            }
            foreach (DirectoryInfo subDir in dir.GetDirectories())
            {
                if (subDir.Name != "tests" && subDir.Name != ".git" && subDir.Name != "node_modules")
                {
                    CopyDirectory(subDir.FullName, Path.Combine(destinationDir, subDir.Name));
                }
            }
        }
    }
}